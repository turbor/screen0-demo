BUFFERWIDTH	equ 80 ; used in blob add buffer
BUFFERHEIGHT	equ 48 ; used in blob add buffer

BUFROWS	equ 8  ; floyd steinberg dither size
BUFCOLS	equ 8  ; floyd steinberg dither size

SCRIPTBLOCKSTART	equ 0
SCRIPTPRINTTEXT	equ 1
SCRIPTCALLBLOCK	equ 2
SCRIPTWAITKEY	equ 3
SCRIPTTYPETEXT	equ 4
SCRIPTCOLFADE	equ 5
SCRIPTSLOWDOWN	equ 6



WRVDP	MACRO	@WAARDE,@POORT
	; {{{
	LD	A,@WAARDE
	OUT	(#99),A
	LD	A,128+@POORT
	OUT	(#99),A
	ENDM
	; }}}

chkvdp2	macro
	; {{{
	LOCAL chkvdp2@sym
chkvdp2@sym
	in	a,(#99)
	rrca
	jp	c,chkvdp2@sym
	endm
	; }}}

DEBUG equ 0

debugdeviceascii macro @TEXTVAL
	; {{{
	if DEBUG
	LOCAL _debugdevicetmp
	LOCAL _debugdevicetmp2
	jr _debugdevicetmp2
_debugdevicetmp 
	db @TEXTVAL
_debugdevicetmp2
	ld a,0x23
	out (0x2e),a
	ld hl,_debugdevicetmp
	ld c,0x2f
	ld b,_debugdevicetmp2-_debugdevicetmp
	otir
	ld a,0x23
	out (0x2e),a
	endif
	endm
	; }}}

divhlby16	macro
	LOCAL _divhlby16
	; {{{
	; divide hl by 16 and place the lowerbyte value in l
	; the high part will be ignored
	; corrected if hl is negative so that a fraction like
	; -0.25 will become 0 and not -1 in twocomplement
	add hl,hl
	add hl,hl
	add hl,hl
	add hl,hl
	ld l,h
	ld a,128
	and l
	jr z,_divhlby16
	inc l
_divhlby16
	endm
	; }}}
;START	EQU	#C000
START	EQU	#100

; header is created by pasmo  and the --msx switch, the org command should be the first one seen by pasmo
;	db	254
;	dw	START,einde,START
	org	START

	di
	;set up screen0 width 80
	wrvdp 0,17
	ld hl,screen0regs
	ld bc,#9b+256*10
	otir
initscriptloop: ;{{{
	di
	wrvdp 0,16
	xor a
	ld h,a
	out (#9a),a
	ld l,a
	out (#9a),a
	ld (curpalet),hl
	out (#9a),a
	xor a
	out (#9a),a
	ld (curpalet+2),hl
	out (#9a),a
	xor a
	out (#9a),a
	ld (curpalet+4),hl
	out (#9a),a
	xor a
	out (#9a),a
	ld (curpalet+6),hl

	;wrvdp 16*4+4,7 ; blue on blue normal
	;wrvdp 16*4+4,12 ; blue on blue blink
	wrvdp 16*1+0,7 ; blue on blue normal
	wrvdp 16*3+2,12 ; blue on blue blink
	wrvdp 16*0+15,13 ; on/off time blink
	call setupdrop
	wrvdp 16*15+0,13 ; on/off time blink

	ld hl,startscript2
	ld (scriptpointer),hl
scriptloop:	ld hl,(scriptpointer)
scriptloop1:	ld a,(hl)
	inc hl
	or a
	jp nz,scriptloop2
	; code 0 means set timer and mark next code as start of new script block
	ld e,(hl)
	inc hl
	ld d,(hl)
	inc hl
	ld a,d
	or e
	jp z,initscriptloop	; timer of 0 means restart script
	ld (scriptpointer),hl
	ld (countdown),de
	;also reset some counters
	ld de,1
	ld (typetextcount),de
	xor a
	ld (scriptquitblock),a
	ld a,(hl)
	inc hl

scriptloop2:	cp SCRIPTPRINTTEXT	;1 this is the mainloop for the scriptitself
	jp c,scriptloop0
	jp z,scriptloop3	; code == 1
	cp SCRIPTCALLBLOCK
	jp z,scriptloop4	; code == 2
	cp SCRIPTTYPETEXT
	jp c,scriptloop5	; code == 3
	jp z,scriptloop6	; code == 4
	cp SCRIPTSLOWDOWN
	jp c,scriptloop7	; code == 5
	jp z,scriptloop8	; code == 6
	; all other codes are considered end of script 
	jp initscriptloop
	; for now all codes >=4 count as code ==4
scriptloop0:	; code 0 so end of block
	ld a,(scriptquitblock)
	or a
	jp nz,scriptloop999
	push hl
	di
	call countorspace
	pop hl
	jp nz,scriptloop
scriptloop999: ; actually timeover or space pressed so we need to continue with this zero as timemarker
	dec hl ; point back to the zero value
	jp scriptloop1

scriptloop3:	; code 1 = print text
	ld e,(hl)
	inc hl
	ld d,(hl)
	inc hl
	push hl
	ld hl,scriptloopcont
	push hl
	ex de,hl
	jp inserttext1 ; acts as call inserttext1 with return address scriptloopcont

scriptloop4:	; code 2 = call code
	ld e,(hl)
	inc hl
	ld d,(hl)
	inc hl
	push hl
	ld hl,scriptloopcont
	push hl
	ex de,hl
	jp (hl)	; acts as call (hl) with return address scriptloopcont
scriptloop5:	; code 3 = wait for timeout or keypress
	push hl
scriptloop51:
	ei
	halt
	di
	call countorspace
	jr nz,scriptloop51
	; in case of a keypress we 'force' the timeout
	ld a,1
	ld (scriptquitblock),a
	;previous we set timer to zero
	;ld hl,0
	;ld (countdown),hl
	jr scriptloopcont
	
scriptloop6:	; code 4 = type text printing
	ld e,(hl)
	inc hl
	ld d,(hl)
	inc hl
	push hl
	ld hl,scriptloopcont
	push hl
	ex de,hl
	jp typetextinsert	; acts as call (hl) with return address scriptloopcont

scriptloop7:	; code 5 = color fading SCRIPTCOLFADE
	ld e,(hl)
	inc hl
	ld d,(hl)
	inc hl
	ld c,(hl)
	inc hl
	push hl
	ld hl,scriptloopcont
	push hl
	push de
	pop iy
	jp fadecolor

scriptloop8:	; code 6 = slowdown
	ld b,(hl)
	inc hl
	push hl
scriptloop81:
	ei
	halt
	di
	push bc
	call countorspace
	pop bc
	jp z,scriptloop82
	djnz scriptloop81
	jr scriptloopcont
scriptloop82:
	ld a,1
	ld (scriptquitblock),a
	;jp scriptloopcont


scriptloopcont:	pop hl
	ld a,(hl)
	inc hl
	jp scriptloop2


	jp scriptloop
	;}}}
scriptquitblock:	db 0
;scriptpointer:	dw startscript
scriptpointer:	dw startscript2
	; ********************
	; First 3 text screens
	; ********************
startscript:	db SCRIPTBLOCKSTART ; set timer
	dw 200 ; timer value
	db SCRIPTCALLBLOCK ; call block
	dw clearbuffers
	db SCRIPTCALLBLOCK ; call block
	dw calculatefirecol
	db SCRIPTPRINTTEXT ; print text
	dw text1 ; start textblock to print
	db SCRIPTCALLBLOCK ; call block
	dw simplecolbufandswap
	db SCRIPTCOLFADE
	dw destpalet1
	db 0

	db SCRIPTBLOCKSTART ; set timer
	dw 200 ; timer value
	db SCRIPTCALLBLOCK ; call block
	dw clearbuffers
	db SCRIPTPRINTTEXT ; print text
	dw text2 ; start textblock to print
	db SCRIPTCALLBLOCK ; call block
	dw simplebufandswap
	db SCRIPTWAITKEY ; wait for timeout or space

	db SCRIPTBLOCKSTART ; set timer
	dw 200 ; timer value
	db SCRIPTCALLBLOCK ; call block
	dw clearbuffers
	db SCRIPTPRINTTEXT ; print text
	dw text3 ; start textblock to print
	db SCRIPTCALLBLOCK ; call block
	dw simplebufandswap
	db SCRIPTWAITKEY ; wait for timeout or space

	; ********************
	; Basic entry text
	; ********************
	db SCRIPTBLOCKSTART ; end-of-previous-block / set timer
	dw 400 ; timer value
	db SCRIPTCALLBLOCK ; call block
	dw clearbuffers
	db SCRIPTPRINTTEXT ; print text
	dw text4 ; start textblock to print
	db SCRIPTCALLBLOCK ; call block
	dw simplebufandswap
	db SCRIPTWAITKEY ; wait for timeout or space

	db SCRIPTBLOCKSTART ; end-of-previous-block / set timer
	dw 40 ; timer value
	db SCRIPTPRINTTEXT ; print text
	dw txt2 ; start textblock to print
	db SCRIPTCALLBLOCK ; call block
	dw simplebufandswap
	db SCRIPTWAITKEY ; wait for timeout or space

	db SCRIPTBLOCKSTART ; end-of-previous-block / set timer
	dw 40 ; timer value
	; start scriptblock
	db SCRIPTTYPETEXT ; print text
	dw txt3 ; start textblock to print
	db SCRIPTCALLBLOCK ; call block
	dw simplebufandswap

	db SCRIPTBLOCKSTART ; set timer
	dw 120 ; timer value
	db SCRIPTPRINTTEXT ; print text
	dw txt4 ; start textblock to print
	db SCRIPTCALLBLOCK ; call block
	dw simplebufandswap
	db SCRIPTWAITKEY ; wait for timeout or space

	; ********************
	; PASSWORD ENTRY
	; ********************
	db SCRIPTBLOCKSTART ; set timer
	dw 1 ; timer value
	db SCRIPTCALLBLOCK ; call block
	dw clearbuffers
	db SCRIPTCALLBLOCK ; call block
	dw simplebufandswap

	db SCRIPTBLOCKSTART ; set timer
	dw 280 ; timer value
	db SCRIPTTYPETEXT ; print text
	dw text5 ; start textblock to print
	db SCRIPTCALLBLOCK ; call block
	dw simplebufandswap

	db SCRIPTBLOCKSTART
	dw 8*10
	db SCRIPTCOLFADE
	dw greenpalet1
	db 0
	db SCRIPTSLOWDOWN ; wait for timeout or space
	db 10

	db SCRIPTBLOCKSTART ; set timer
	dw 60 ; timer value
	db SCRIPTPRINTTEXT ; print text
	dw txt5 ; start textblock to print
	db SCRIPTCALLBLOCK ; call block
	dw simplebufandswap
	db SCRIPTWAITKEY ; wait for timeout or space

	db SCRIPTBLOCKSTART ; set timer
	dw 80 ; timer value
	db SCRIPTTYPETEXT ; print text
	dw txt6 ; start textblock to print
	db SCRIPTCALLBLOCK ; call block
	dw simplebufandswap
	db SCRIPTSLOWDOWN ; wait for timeout or space
	db 6

	db SCRIPTBLOCKSTART ; set timer
	dw 180 ; timer value
	db SCRIPTPRINTTEXT ; print text
	dw txt7 ; start textblock to print
	db SCRIPTCALLBLOCK ; call block
	dw simplebufandswap
	db SCRIPTWAITKEY ; wait for timeout or space

	; ********************
	; Matrix rain
	; ********************
	db SCRIPTBLOCKSTART
	dw 110
	db SCRIPTCALLBLOCK ; call block
	dw clearbuffers
	db SCRIPTPRINTTEXT ; print text
	dw text6 ; start textblock to print
	db SCRIPTCALLBLOCK ; call block
	dw simplebufandswap
	db SCRIPTWAITKEY ; wait for timeout or space

	db SCRIPTBLOCKSTART
	dw 9999
	db SCRIPTCALLBLOCK ; call block
	dw fadeout
	db SCRIPTCALLBLOCK ; call block
	dw matrixrain
	db SCRIPTPRINTTEXT ; print text
	dw text6 ; start textblock to print
	db SCRIPTCALLBLOCK ; call block
	dw calculatefirecol
	db SCRIPTCALLBLOCK ; call block
	dw simplecolbufandswap
	db SCRIPTSLOWDOWN
	db 8

	; ********************
	; Rotazoomer
	; ********************
startscript2:
	; first the letter rotazoomer
	db SCRIPTBLOCKSTART ; Prepare rotazoomer
	dw 1
	db SCRIPTCALLBLOCK
	dw setuprotazoom1

	db SCRIPTBLOCKSTART ; end-of-previous-block / set timer
	dw 1128 ; +/- 5FPS for 180 seconds
	db SCRIPTCALLBLOCK
	dw rotazooml1
	db SCRIPTCALLBLOCK
	dw rotazoomloop

	db SCRIPTBLOCKSTART ; Toggle or (hl)
	dw 1
	db SCRIPTCALLBLOCK
	dw setuprotazoom3

	db SCRIPTBLOCKSTART ; end-of-previous-block / set timer
	dw 3*64 ; +/- 5FPS for 180 seconds
	db SCRIPTCALLBLOCK
	dw rotazooml1
	db SCRIPTCALLBLOCK
	dw fadeout
	db SCRIPTCALLBLOCK
	dw rotazoomloop
	;db SCRIPTCOLFADE
	;dw destpalet1
	;db 0

	db SCRIPTBLOCKSTART ; Toggle or (hl)
	dw 1
	db SCRIPTCALLBLOCK
	dw setuprotazoom3

	db SCRIPTBLOCKSTART ; Fade to black
	dw 3*8
	db SCRIPTCOLFADE
	dw destpalet2
	db 3

	; second the face rotazoomer
	db SCRIPTBLOCKSTART ; Prepare rotazoomer
	dw 1
	db SCRIPTCALLBLOCK
	dw setuprotazoom2

	db SCRIPTBLOCKSTART ; end-of-previous-block / set timer
	dw 16 ; +/- 5FPS for 180 seconds
	db SCRIPTCALLBLOCK
	dw rotazooml2
	db SCRIPTCALLBLOCK
	dw rotazoomloop
	db SCRIPTCOLFADE
	dw destpalet4
	db 0

	db SCRIPTBLOCKSTART ; end-of-previous-block / set timer
	dw 15*180 ; +/- 5FPS for 180 seconds
	db SCRIPTCALLBLOCK
	dw rotazooml2
	db SCRIPTCALLBLOCK
	dw rotazoomloop

	db SCRIPTBLOCKSTART ; Fade to black
	dw 3*8
	db SCRIPTCALLBLOCK
	dw rotazooml2
	db SCRIPTCALLBLOCK
	dw rotazoomloop
	db SCRIPTCOLFADE
	dw destpalet2
	db 3


	db SCRIPTBLOCKSTART ; Prepare plasma
	dw 1
	db SCRIPTCALLBLOCK
	dw setupplasma

	db SCRIPTBLOCKSTART ; end-of-previous-block / set timer
	dw 5*180 ; +/- 5FPS for 180 seconds
	db SCRIPTCALLBLOCK
	dw plasmaloop
	db SCRIPTCOLFADE
	dw destpalet1
	db 0

	db SCRIPTBLOCKSTART ; Fade to black
	dw 8*3
	db SCRIPTCOLFADE
	dw destpalet2
	db 3

	db SCRIPTBLOCKSTART ; end-of-previous-block / set timer
	dw 1
	db SCRIPTCALLBLOCK
	dw setupfire

	db SCRIPTBLOCKSTART ; end-of-previous-block / set timer
	dw 15*80 ; +/- 15FPS for 80 seconds
	db SCRIPTCALLBLOCK
	dw fireloop

	db SCRIPTBLOCKSTART ; end-of-previous-block / set timer
	dw 0 ; restart script from beginning

txt1:	db #1c,#8a,28,"Welcome to the screen 0 demo",0,0

txt2:	db #00,#80,21,"MSX Basic version 2.1"
	db #00,#81,27,"Copyright 1986 by Microsoft"
	db #00,#83,22,"Disk Basic version 1.0"
	db #00,#84, 2,"Ok",0,0

txt3:	db #00,#85,23,"10 Print ",34,"Hello World",33,34
	db #00,#86,10,"20 GOTO 10"
	db #00,#87,3,"run",0,0
txt4:	db #00,#88,12,"Hello World",33,0,0

txt5:	db 31,#8d,18,"+----------------+"
	db 31,#8e,18,"+ Enter password +"
	db 31,#8f,18,"+ ______________ +"
	db 31,#90,18,"+----------------+",0,0
txt6:	db 31,#8f,18,"+ ************** +",0,0
txt7:	db 31,#8e,18,"+ Password valid +"
	db 31,#8f,18,"+                +",0,0

text1:	db #0B,#8a,58,"When looking for a new fun programming project on the MSX,"
	db #0D,#8b,53,"I realized that almost nobody uses the MSX2 screen 0."
	db 47 ,#80+23,32,"Wait or press space to continue.",0,0

text2:	db #06,#8a,67,"So maybe it is time to create a tribute to this underused screen 0 ",0,0

text3:	db #19,#8a,30,"Welcome to a screen 0 tribute",33,0,0

text4:	db #05,#89,72,"Most MSX users will know that screen 0 is a character based screen mode."
	db #08,#8b,63,"And it is mostly used for texteditors, music composing programs"
	db #08,#8c,56,"and most people only use it for entering Basic programs.",0,0

text5:	db #0d,#88,54,"But trying to explain a character based screen mode to"
	db #0d,#89,52,"ordinary people will make them think of fancy hacker"
	db #0d,#8a,54,"movie scene were some protagonist guesses the password"
	db #0d,#8b,50,"just in time. All in the obligatory green on black",0,0

text6:	db #0d,#8a,55,"Or they start thinking about the Matrix character rain.",0,0

text7:	db #0d,#8a,56,"Maybe we could create a game like River Raid in screen 0",0,0

text8:	db #00,#89,50,"But that would introduce extra code like userinput"
	db #00,#8a,51,"and some decent gameplay routine so let's skip game"
	db #00,#8b,20,"programming for now.",0,0

text9:	db #00,#8a,20,"Of course you might have noticed by now that everything moves one character at a time.",0,0
text10:	db #00,#8a,20,"This is because it is extremly hard to make something like a smoothscroll",0,0
text11:	db #00,#8a,20,"And if you would create somethin like a smoothscrool it is porbably only possible for one line ",0,0
text12:	db #00,#8a,20,"or maybe not. We could ofcourse scroll the same line of text on all lines",0,0
text13:	db #00,#8a,20,"It also isn't verry likely that a programmer can introduce an extra scroll direction.",0,0
text14:	db #00,#8a,20,"Or introduce some extra big scroller in front of the little scroller.",0,0

text15:	db #00,#8a,20,"It might even be possible to create some metablobs in screen 0.",0,0

text16:	db #00,#8a,20,"Or recreate one of those timeless classical effects in old skool demos like the fire routine",0,0

text17:	db #00,#8a,20,"Or even rotating text with motion blur.",0,0

text18:	db #00,#8a,20,"Or the good old rotazoomer.",0,0

text19:	db #00,#8a,20,"This demo will relaunch in 10,9,8,7,6,5,4,3,2,1",0,0




simplecolbufandswap:	;  helper for script
	call transferbuf2col
simplebufandswap:	; {{{ helper for script
	call transferbuf2char
	ei
	halt
	jp swappage
	;}}}

mainloop:
startdrop:	; {{{
	ld hl,50*180 ; +/- 5FPS
	ld (countdown),hl
	call setupdrop
	ld hl,welcometxt
	ld (inserttextpoint),hl
	call inserttext
droploop:
	ld a,'A'
	ld (#8000),a
	ld a,'B'
	ld (#8000+40),a
	ld a,'C'
	ld (#8000+79),a
	call dodrop
	call transferbuf2char
	ei
	halt
	halt
	call swappage
	call countorspace
	jr nz,droploop
	;}}}

matrixrain:	;{{{
	ld hl,matrixwords
	ld b,12
matrixrain2:
	push bc
	call matrixdrop
	pop bc
	djnz matrixrain2
	ret

matrixdrop:
	ld c,(hl)
	inc hl
	ld a,(hl)
	cp c
	jp nc,matrixdrop2
	inc a
	ld (hl),a
	inc hl
	inc hl
	inc (hl)
	dec hl
	jr matrixdrop21
matrixdrop2:
	xor a
	ld (hl),a
	inc hl
matrixdrop21:
	ld e,(hl)
	inc hl
	ld d,(hl)
	inc d
	ld (hl),d
	ld (matrixdroptmp),hl
	inc hl
	ld b,(hl)
	inc hl
	;and add a random character at the top
	ld a,#80
	cp d
	jp nc,matrixdrop5
	call RANDOM
	or 128
	ld (de),a
matrixdrop5:	inc d
matrixdrop3:
	ld a,#80
	cp d
	jp nc,matrixdrop4
	ld a,(hl)
	ld (de),a
matrixdrop4:
	inc hl
	inc d
	djnz matrixdrop3
	ld a,d
	cp #80+40 ; max word length is 40-24=16
	ret c
	ld a,#80-16
	ld de,(matrixdroptmp)
	ld (de),a
	dec de
	call RANDOM
matrixdrop6
	sub 80
	jr nc,matrixdrop6
	add a,80
	dec de
	ld (de),a
	ret
matrixdroptmp	dw 0
matrixwords:
	db 2,0	; max + counter
	db 34,#74	; x and y
	db 7,32+128,'m'+128,'a'+128,'t'+128,'r'+128,'i'+128,'x'+128
	db 2,0	; max + counter
	db 64,#84	; x and y
	db 5,32+128,'r'+128,'a'+128,'i'+128,'n'+128
	db 2,0	; max + counter
	db 14,#8f	; x and y
	db 6,32+128,'w'+128,'o'+128,'r'+128,'d'+128,'s'+128

	db 1,0	; max + counter
	db 76,#81	; x and y
	db 4,'r'+128,'a'+128,'i'+128,'n'+128
	db 1,0	; max + counter
	db 38,#84	; x and y
	db 6,'m'+128,'a'+128,'t'+128,'r'+128,'i'+128,'x'+128
	db 1,0	; max + counter
	db 11,#8a	; x and y
	db 4,'r'+128,'a'+128,'i'+128,'n'+128
	db 1,0	; max + counter
	db 43,#82	; x and y
	db 5,'w'+128,'o'+128,'r'+128,'d'+128,'s'+128

	db 0,0	; max + counter
	db 58,#74	; x and y
	db 6,'m'+128,'a'+128,'t'+128,'r'+128,'i'+128,'x'+128
	db 0,0	; max + counter
	db 2,#84	; x and y
	db 6,32+128,32+128,'r'+128,'a'+128,'i'+128,'n'+128
	db 0,0	; max + counter
	db 72,#8f	; x and y
	db 5,'w'+128,'o'+128,'r'+128,'d'+128,'s'+128

	db 0,0	; max + counter
	db 11,#84	; x and y
	db 6,'m'+128,'a'+128,'t'+128,'r'+128,'i'+128,'x'+128
	db 0,0	; max + counter
	db 37,#92	; x and y
	db 8,32+128,32+128,32+128,'w'+128,'o'+128,'r'+128,'d'+128,'s'+128
	;}}}

plasmaloop:	; {{{
	di
	if DEBUG
	ld a,#58	; openmsx debugdevice
	out (#2e),a	; set mode
	ld a,"1"	; out '1' and timestamp!!
	out (#2f),a
	endif
	call clearblobs
	call moveblobs
	call addblobs
	call inserttext
	call translatebuf2char

	call scrollcolchar
	call transferbuf2col
	call swappage

	if DEBUG
	ld a,"2"
	out (#2f),a
	endif
	ei
	ret
	;}}}

fireloop:	; {{{
	call firecolor
	call calculatefire
	call inserttext
	call calculatefirecol
	call transferbuf2col
	call transferbuf2char
	ei
	halt
	call swappage
	ret
	;}}}

firecolorcount:	db 10
firecolorcnt2:	db 0
firepaletpointer: dw firepalet1
firecolor:	ld a,(firecolorcount)
	inc a
	ld (firecolorcount),a
	cp 10
	jp c,firecolor2
	xor a
	ld d,a
	ld (firecolorcount),a
	ld a,(firecolorcnt2)
	inc a
	and 3
	ld (firecolorcnt2),a
	add a,a
	add a,a
	add a,a
	ld e,a
	ld hl,firepalet1
	add hl,de
	ld (firepaletpointer),hl
firecolor2:	ld iy,(firepaletpointer)
	ld c,2
	;jp fadecolor

fadecolor:	; {{{ fade from curpalet to new palet at iy
	ld a,(fadecolorspeed)
	cp c
	jr nc,fadecolor0
	inc a
	ld (fadecolorspeed),a
	ret
fadecolor0:
	xor a
	ld (fadecolorspeed),a
	ld ix,curpalet
	ld b,8
fadecolor1:	ld d,(ix+0)
	ld e,(iy+0)
	ld a,15
	and e
	ld c,a
	ld a,15
	and d
	cp c
	jr z,fadecolor3
	jr c,fadecolor2
	dec d
	jr fadecolor3
fadecolor2:	inc d
fadecolor3:	ld a,#f0
	and e
	ld c,a
	ld a,#f0
	and d
	cp c
	jr z,fadecolor6
	ld a,d
	jr c,fadecolor4
	sub 16
	jr fadecolor5
fadecolor4:	add a,16
fadecolor5:
	ld d,a
fadecolor6:
	ld (ix+0),d
	inc ix
	inc iy
	djnz fadecolor1
fadecolor7:
	di
	wrvdp 0,16
	ld bc,8*256+#9a
	ld hl,curpalet
	otir
	ret
fadecolorspeed: db 0
	;}}}

setcolor:	; {{{ fade from curpalet to new palet at hl
	ld de,curpalet
	ld bc,8
	ldir
	jp fadecolor7

	;}}}
curpalet:	db 0,0, 0,0, 0,0, 0,0 ; bg,fg, blink-bg, blink-fg
destpalet1:	db #17,1, #77,7, #17,1, #00,0
destpalet2:	db #00,0, #00,0, #00,0, #00,0
destpalet3:	db #17,1, #44,4, #17,1, #77,7
destpalet4:	db #17,1, #77,7, #17,1, #77,7
firepalet1:	db #00,0, #61,6, #61,6, #71,1 ; fire palet
firepalet2:	db #00,0, #50,5, #50,5, #61,1 ; fire palet
firepalet3:	db #00,0, #61,6, #61,6, #60,0 ; fire palet
firepalet4:	db #00,0, #60,6, #60,6, #70,0 ; fire palet
greenpalet1:	db #00,0, #00,7, #11,3, #77,7 ; matrix palet

countorspace:	;{{{ countdown timer or pressed zer: return 'Z' if one of those conditions is met
	in a,(#aa)
	and #f0
	or 8	; row 8: right,down,up,left,del,ins,home,space
	out (#aa),a
	nop
	in a,(#a9)
	and 1	; spacebar only
	ld l,a
	ld a,(previosspace)
	ld h,a
	ld a,l
	ld (previosspace),a
	xor 1
	or h
	ret z
	ld hl,(countdown)
	ld a,h
	or l
	ret z	; if script code 3 has timeout then end-of-block might wrap counter....
	dec hl
	ld (countdown),hl
	ld a,h
	or l
	ret

previosspace:	db 1 ; start with spacekey not pressed
	;}}}

screen0regs:	db #04,#70,#03,#27,#02,#36,#07,#f4
	db #08,#00
countdown:	dw 0
typetextcount:	dw 1

clearbuffers:	; {{{
	ld hl,#8000-10*24
	ld de,#8001-10*24
	ld bc,10*24+BUFFERHEIGHT*256-1
	xor a
	ld (hl),a
	ldir
	ret
	; }}}

makeemptychars: ; {{{
	; set up write #4096
	;no commands so no chkvdp2
	di
	wrvdp 0,45
	wrvdp 0,14
	xor a
	out (#99),a
	ld a,64+#10
	out (#99),a
	xor a
	ld b,256-((fontdataend - fontdata)/8)
emptychars:
	out (#98),a
	nop
	out (#98),a
	nop
	out (#98),a
	nop
	out (#98),a
	nop
	out (#98),a
	nop
	out (#98),a
	nop
	out (#98),a
	nop
	out (#98),a
	nop
	djnz emptychars
	ld hl,fontdata
	ld bc,#98+256*240 ; total 8*62chars = 240+256bytes
	otir
	otir
	ret
	; }}}

setupfire:	;{{{
	ld hl,firetext
	ld (inserttextpoint),hl
	ld a,254
	ld (firecolorcount),a
	call makeemptychars
	call clearbuffers
	call transferbuf2col
	call translatebuf2char
	call swappage
	;wrvdp 16*10+0,7 ; yellow on black normal
	;wrvdp 16*8+10,12 ; red on yellow blink
	wrvdp 16*15+0,13 ; on/off time blink
	; set up write #4096+8*96 (only visible cahrs starting at chr$(10))
	;no commands so no chkvdp2
	wrvdp 0,45
	wrvdp 0,14
	ld a,0
	out (#99),a
	ld a,64+#13
	out (#99),a

	; now build the chars
	ld b,2
firebuildchrs1:	push bc
	ld b,32
firebuildchrs2:	push bc
	ld a,33
	sub b
	add a,a
	add a,a
	add a,a
	dec a
	call fillbuffer
	call dither
	call buffertochar
	call chartovram
	pop bc
	djnz firebuildchrs2
	pop bc
	djnz firebuildchrs1
	;now fill some extra with '255' chars
	ld b,22
firebuildchrs3:	push bc
	call chartovram
	pop bc
	djnz firebuildchrs3
	ret

calculatefirecol:
	ld de,#8000-24*10
	ld hl,#8000
	ld b,24
calculatefirecol1:
	push bc
	ld b,10
calculatefirecol2:
	ld a,(hl)
	inc l
	add a,a
	rl c

	ld a,(hl)
	inc l
	add a,a
	rl c

	ld a,(hl)
	inc l
	add a,a
	rl c

	ld a,(hl)
	inc l
	add a,a
	rl c

	ld a,(hl)
	inc l
	add a,a
	rl c

	ld a,(hl)
	inc l
	add a,a
	rl c

	ld a,(hl)
	inc l
	add a,a
	rl c

	ld a,(hl)
	inc l
	add a,a
	rl c

	ld a,c
	ld (de),a
	inc de

	djnz calculatefirecol2
	ld l,0
	inc h
	pop bc
	djnz calculatefirecol1
	ret
	; }}}
calculatefire:	; {{{
	; first insert some extra cold in the lines above
	ld hl,#8000+16*256
	call random
	and 3
	add a,h
	ld h,a
	ld b,5
calculatefire0:
	call random
	and 63
	add a,8
	ld l,a
	ld a,(hl)
	cp 20
	jr c,calculatefire01
	sub 20
	ld (hl),a
calculatefire01:
	djnz calculatefire0
	; then fill bottom with random values
	; first base heat
	ld hl,#8000+23*256
	ld de,#8001+23*256
	ld bc,80
	call random
	and 63
	add a,101
	ld (hl),a
	ldir
	; now random spots
	ld hl,#8000+23*256
	call random
	and 3
	add a,2
	ld b,a
calculatefire1:	call random
	and 63
	add a,8
	ld l,a
	call random
	and 127
	or 128
	ld (hl),a
	inc hl
	djnz calculatefire1
	; now move up and decrease value
	ld b,22
calculatefire2:
	push bc
	ld d,h
	dec h
	xor a
	ld l,a
	ld e,a
	push de
	pop ix
	; first a special case for the first point
	ld a,(hl)
	add a,(ix+1)
	rra
	ld e,a
	ld a,(ix+0)
	add a,e
	rra
	dec a
	dec a
	dec a
	dec a
	ld (hl),a
	;now loop for 80-2 time
	ld b,78
calculatefire3:
	inc l
	inc ix
	ld a,(hl)
	add a,(ix-1)
	rra
	ld e,a
	ld a,(ix+0)
	add a,(ix+1)
	rra
	add a,e
	rra
	dec a
	ld (hl),a
	djnz calculatefire3
	; special case for last point
	inc l
	inc ix
	ld a,(hl)
	add a,(ix-1)
	rra
	ld e,a
	ld a,(ix+0)
	add a,e
	rra
	dec a
	dec a
	dec a
	dec a
	ld (hl),a

	pop bc
	djnz calculatefire2
	ret
	;}}}

setupdrop:	; {{{
	di
;	wrvdp 16*0+15,13 ; on/off time blink
;	wrvdp 16*4+4,7 ; white on blue normal
	call clearbuffers
	call transferbuf2col
	call transferbuf2char
	call makeemptychars
	; start writing in regular ASCII places 
	di
	wrvdp 0,45
	wrvdp 0,14
	ld a,#08	; ASCII '!'=33 => 33*8 =0x108
	out (#99),a
	ld a,64+#11
	out (#99),a
	ld hl,prefontdata
	ld bc,200*256+#98
	otir
;	ld a,#80	; ASCII '0'=48 => 48*8 = 0x180
;	out (#99),a
;	ld a,64+#11
;	out (#99),a
;	xor a
;	ld hl,fontdata
;	ld bc,80*256+#98
;	otir
	; acii 'A'=65 => 65*8= 0x208
	ld a,#08
	out (#99),a
	ld a,64+#12
	out (#99),a
	ld b,26*8
	otir
	; acii 'a'=97 => 97*8= 0x308
	ld a,#08
	out (#99),a
	ld a,64+#13
	out (#99),a
	ld b,26*8
	otir

	ld a,#08	; ASCII '!'+128=33+128 => (128+33)*8 =0x508
	out (#99),a
	ld a,64+#15
	out (#99),a
	ld hl,prefontdata
	ld bc,200*256+#98
	otir
;	ld a,#80	; ASCII '0'+128=48+128 => (128+48)*8 = 0x580
;	out (#99),a
;	ld a,64+#15
;	out (#99),a
;	xor a
;	ld hl,fontdata
;	ld bc,80*256+#98
;	otir
	; acii 'A'=65+128 => (128+65)*8= 0x608
	ld a,#08
	out (#99),a
	ld a,64+#16
	out (#99),a
	ld b,26*8
	otir
	; acii 'a'=97+128 => (128+97)*8= 0x708
	ld a,#08
	out (#99),a
	ld a,64+#17
	out (#99),a
	ld b,26*8
	otir
	;wrvdp 16*15+4,7 ; white on blue normal
	ret
	;}}}
dodrop:	; {{{
	ld hl,#8000+79+22*256
dodropouterloop:
	;special case right char
	ld a,(hl)
	or a
	jp z,dodropouterloop2
	; yes this is a char maybe we can drop downwards
	ld c,a
	inc h
	ld a,(hl)
	or a
	jp nz,dodropouterloop1
	;fall downwards
	ld (hl),c
	dec h
	xor a
	ld (hl),a
	jp dodropouterloop2
dodropouterloop1: ;maybe we can drop left
	dec l
	ld a,(hl)
	or a
	jp nz,dodropouterloop3
	ld (hl),c
	inc l
	dec h
	xor a
	ld (hl),a
	jp dodropinnerloop

dodropouterloop3:
	dec h
	xor a
	jp dodropinnerloop

dodropouterloop2:
	dec l
	xor a
dodropinnerloop:
	or (hl)
	jp nz,dodropinnerloop2
	dec l
	jp nz,dodropinnerloop
	jp dodroprightchar
dodropinnerloop2: ; yes this is a char maybe we can drop downwards
	ld c,a
	inc h
	ld a,(hl)
	or a
	jp nz,dodropinnerloop3
	;fall downwards
	ld (hl),c
	dec h
	xor a
	ld (hl),a
	dec l
	jp nz,dodropinnerloop
	jp dodroprightchar
dodropinnerloop3: ;maybe we can drop to the right
	inc l
	ld a,(hl)
	or a
	jp nz,dodropinnerloop4
	;fall to right
	ld (hl),c
	dec h
	dec l
	xor a
	ld (hl),a
	dec l
	jp nz,dodropinnerloop
	jp dodroprightchar
dodropinnerloop4: ;maybe we can drop to the left
	dec l
	dec l
	ld a,(hl)
	or a
	jp nz,dodropinnerloop5
	; fall to left
	ld (hl),c
	inc l
	dec h
	xor a
	ld (hl),a
	dec l
	jp nz,dodropinnerloop
	jp dodroprightchar
dodropinnerloop5: ; no place to go
	dec h
	ld a,l
	or a
	jp z,dodroprightchar
	xor a
	jp dodropinnerloop

dodroprightchar: ;special case for right char
	or (hl)
	jp z,dodroprightcharend
	; maybe drop down?
	ld c,a
	inc h
	ld a,(hl)
	or a
	jp nz,dodroprightchar2
	ld (hl),c
	dec h
	xor a
	ld (hl),a
	jp dodroprightcharend
dodroprightchar2: ; maybe drop right
	inc l
	ld a,(hl)
	or a
	jp nz,dodroprightchar3
	ld (hl),c
	dec l
	dec h
	xor a
	ld (hl),a
	jp dodroprightcharend
dodroprightchar3:
	dec h

dodroprightcharend:
	ld l,79
	dec h
	ld a,h
	cp #7f
	ret z
	jp dodropouterloop

	ret
	;}}}
fadeout:	;{{{
	ld hl,#8000+79+23*256
fadeoutloop:
	ld b,80
fadeoutloop2:
	ld a,(hl)
	or a	;clear C-flag
	rr a	; divide by 2 unsigned
	ld c,a
	sra a	; divide by 4
	add a,c	; a has become (hl)*3/4
	ld (hl),a
	dec l
	djnz fadeoutloop2

	ld l,79
	dec h
	ld a,h
	cp #7f
	ret z
	jp fadeoutloop
	;}}}

setuprotazoom3:	;{{{
	ld a,(rotazoomnop)
	xor #b6
	ld (rotazoomnop),a
	ret
	;}}}
setuprotazoom1:	;{{{
	call clearbuffers
	call transferbuf2col
	call translatebuf2char
	call swappage
	call makeemptychars

	ld hl,destpalet3
	call setcolor	
	di
	wrvdp 16*15+0,13 ; on/off time blink
	; set up write #4096+8*1 (only visible cahrs starting at chr$(1))
	;no commands so no chkvdp2
	wrvdp 0,45
	wrvdp 0,14
	ld a,1*8
	out (#99),a
	ld a,64+#10
	out (#99),a

	; now build the chars
	ld (bitmapzoom),a
	ld b,255
buildcharsrot1:	push bc
	xor a
	sub b
	ld c,a
	sra c	; bit 6
	or c
	sra c	; bit 5
	or c
	sra c	; bit 4
	or c
	sra c	; bit 3
	or c
	sra c	; bit 2
	or c
	sra c	; bit 1
	or c
	sra c	; bit 0
	or c
	ld c,a
	ld a,(bitmapzoom)
	cp c
	jr z,buildcharsrot1a
	ld a,c
	ld (bitmapzoom),a
	call fillbuffer
	call dither
	call buffertochar
buildcharsrot1a:
	call chartovram
	pop bc
	djnz buildcharsrot1


	ld hl,32*256
	ld (mainx),hl
	ld (mainy),hl
	ld a,14
	ld (bitmapzoom),a
	ld hl,256*0
	ld (bitmaprot-1),hl
	ld hl,1024
	ld (bitmaprotspeed),hl
	ld a,#a1 ; opcode "and c"
	ld (rotazoomand),a
	ret
	;}}}
setuprotazoom2:	;{{{
	call clearbuffers
	call transferbuf2col
	call translatebuf2char
	call swappage
	call makeemptychars
	di
	ld hl,destpalet4
	call setcolor	
	ld a,#00 ; opcode "nop"
	ld (rotazoomand),a
	ld (rotazoomnop),a
	wrvdp 16*15+0,13 ; on/off time blink
	; set up write #4096+8*1 (only visible cahrs starting at chr$(1))
	;no commands so no chkvdp2
	wrvdp 0,45
	wrvdp 0,14
	ld a,1*8
	out (#99),a
	ld a,64+#10
	out (#99),a

	; now build the chars
	ld b,255
buildcharsrot2:	push bc
	xor a
	sub b
	and 63
	add a,a
	add a,a
	call fillbuffer
	call dither
	call buffertochar
	call chartovram
	pop bc
	djnz buildcharsrot2
	ld hl,32*256
	ld (mainx),hl
	ld (mainy),hl
	ret
	;}}}
 macro mulu255	; needs mulu255mac {{{
	; Place the mul255mac data exactly once in your main program
	;
	; results in r1*r2 where r1 and r2 are unsigned bytes
	;
	; Input: A,D are to be multiplied
	; Output: HL contains the result of the multiplication
	; Changes: ALL MAINREGISTER (no mirror registers are used)
	;          D remains unchanged
	ld	e,a
	sub	d
;	jr	nc,mulu1@sym
	jp nc,$+5
	neg
;mulu1@sym
	ld	h,mul255small/256
	ld	l,a
	ld	c,(hl)
	inc	h
	ld	b,(hl)
	ld	a,e
	add	a,d
;	jr	nc,mulu2@sym
	jp nc,$+5
	ld	h,mul255bigh/256
;mulu2@sym	
	ld	l,a
	ld	e,(hl)
	dec	h
	ld	l,(hl)
	ld	h,e
	or	a
	sbc	hl,bc
	endm
	; }}}
  macro mulu128	;takes care of 2 two-complements bytes {{{
	; routine uses mulu255, Doesn't alter D and uses also AF'
	; Input: A,D are to be multiplied
	; Output: HL contains the result of the multiplication
	ld	e,a
	xor	a
	ld	b,a
	or	e
;	jp	p,mulb1@sym
	jp	p,$+7
	neg
	ld	e,a
	inc	b
;mulb1@sym
	xor	a
	or	d
;	jp	p,mulb2@sym
	jp	p,$+7
	neg
	ld	d,a
	inc	b
;mulb2@sym
	ld	a,b
	ex	af,af'
	ld	a,e
	mulu255
	ex	af,af'
	and	1
;	jp	z,mulb3@sym
	jp	z,$+10
	ld	b,h
	ld	c,l
	ld	hl,0
	sbc	hl,bc
;mulb3@sym	;lege lijn
	endm
	;}}}

rotazooml1:	;{{{ perform rotation and zoom
	ld de,(bitmaprotspeed)
	ld a,(rotazoomlcnt)
	add a,2
	ld (rotazoomlcnt),a
	ld h,sintab/256
	ld l,a
	ld a,(hl)
	ld l,a
	ld h,0
	and 128
	jr z,rotazooml1_1
	dec h
rotazooml1_1:
	;add hl,hl ; 64 => 128
	;add hl,hl ; 128 => 256
	sra h 
	rr l
	sra h
	rr l

	ld a,l
	add a,16
	;ld (bitmapzoom),a

	add hl,de
	ex de,hl
	ld (bitmaprotspeed),de
	ld hl,(bitmaprot-1)
	add hl,de
	ld (bitmaprot-1),hl
	ret
	;}}}

rotazooml2:	;{{{ perform rotation and zoom
	ld a,(bitmaprot)
	add a,4
	ld (bitmaprot),a
	ld a,(rotazoomlcnt)
	add a,2
	ld (rotazoomlcnt),a
	ld h,sintab/256
	ld l,a
	ld a,(hl)
	sra a
	add a,40
	ld (bitmapzoom),a
	ld hl,(mainx)
	ld de,6
	add hl,de
	ld (mainx),hl
	ret
;}}}
rotazoomlcnt:	db 0

rotazoomloop:	;{{{
	; calculate deltax
	ld a,(bitmaprot)
	add a,64
	ld l,a
	ld h,sintab/256
	ld d,(hl)
	ld a,(bitmapzoom)	; -64<=d<=64 and a between -128 and 127, if a=16 > then scale=1.0
	mulu128
 macro shiftcorrect
	sra h
	rr l
	sra h
	rr l
	endm
	shiftcorrect
	ld (deltax),hl
	nop
	nop
	nop
	nop
aaaaaaaa1:

	; calculate deltay
	ld a,(bitmaprot)
	ld l,a
	ld h,sintab/256
	ld d,(hl)
	ld a,(bitmapzoom)
	mulu128
	shiftcorrect
	ld (deltay),hl
	nop
	nop
	nop
	nop
aaaaaaaa2:

	; calculate linedeltax
	ld a,(bitmaprot)
	add a,128
	ld l,a
	ld h,sintab/256
	ld d,(hl)
	ld a,(bitmapzoom)
	mulu128
	shiftcorrect
	ld (linedeltax),hl
	nop
	nop
	nop
	nop
aaaaaaaa3:

	; calculate linedeltay
	ld a,(bitmaprot)
	add a,64
	ld l,a
	ld h,sintab/256
	ld d,(hl)
	ld a,(bitmapzoom)
	mulu128
	shiftcorrect
	ld (linedeltay),hl
	nop
	nop
	nop
	nop
aaaaaaaa4:

	; assuming the mainx,mainy are the center
	; we now calculate the bitmapx,bitmapy
	ld hl,0
	ld de,(deltax)
	or a
	sbc hl,de	; hl = -delatx
	; times 40
	add hl,hl
	add hl,hl
	add hl,hl
	ld b,h
	ld c,l
	add hl,hl
	add hl,hl
	add hl,bc

	ex de,hl
	ld hl,0
	ld bc,(linedeltax)
	or a
	sbc hl,bc	; hl - linedeltax
	; times 12
	add hl,hl
	add hl,hl
	ld b,h
	ld c,l
	add hl,hl
	add hl,bc

	add hl,de
	db #11; directly load de instead of more generic "ld de,(mainx)"
mainx	dw 256*32
	add hl,de
	ld (bitmapx),hl

	ld hl,0
	ld de,(linedeltay)
	or a
	sbc hl,de	; hl = -lindedeltay
	; times 12
	add hl,hl
	add hl,hl
	ld b,h
	ld c,l
	add hl,hl
	add hl,bc

	ex de,hl
	ld hl,0
	ld bc,(deltay)
	or a
	sbc hl,bc	; hl = -deltay
	; times 40
	add hl,hl
	add hl,hl
	add hl,hl
	ld b,h
	ld c,l
	add hl,hl
	add hl,hl
	add hl,bc

	add hl,de
	db #11; directly load de instead of more generic "ld de,(mainy)"
mainy	dw 256*32
	add hl,de
	ld (bitmapy),hl
	; start in upper left corner with filling
mainlinestart:
	ld hl,#8000
mainline	
	exx
	db #01; directly load bc instead of "ld bc,(bitmapy)"
bitmapy	dw 0
	db #11; directly load de instead of "ld de,(bitmapx)"
bitmapx	dw 0
	exx
	ld bc,80*256+#c0
	
mainloopline
	exx
	db #21 ; ld hl,0
deltax	dw 0
	add hl,de	; x=x+dx
	ex de,hl
	db #21 ; ld hl,0
deltay	dw 0
	add hl,bc	; y=y+dy
	ld b,h
	ld c,l
	; now use d(==bitmapxx) and b(==bitmapy) to fetch value from bitmap
	ld a,d
	add a,a
	add a,a
	ld l,a
	ld a,#3f
	and b
	sra a
	rr l
	sra a
	rr l
	add a,bitmapdata/256
	ld h,a
	ld a,(hl)
	exx
rotazoomand:	and c ; can be replace with nop to show the head...
rotazoomnop:	nop ; can be replaced with "or (hl)"=#B6 to make overlays/movement fades...
	ld (hl),a
	inc l
	djnz mainloopline
mainloopin2
	ld l,0
	inc h
	push hl
	; adjust bitmapx and bitmapy
	ld hl,(bitmapx)
	db #11; directly load de instead of more generic "ld de,(linedeltax)"
linedeltax	dw 0
	add hl,de
	ld (bitmapx),hl

	ld hl,(bitmapy)
	db #11; directly load de instead of more generic "ld de,(linedeltay)"
linedeltay	dw 0
	add hl,de
	ld (bitmapy),hl
	pop hl
	; was this the last line
	ld a,#80+24
	cp h
	jp nz,mainline
	call calculatefirecol
	call transferbuf2col
	call transferbuf2char
	ei
	halt
	call swappage
	ret
	;}}}

bitmapzoom db 32; 16= scale 1.0 32=scale 0.5 etc etc
bitmaprotspeed	dw 0
	db 0 ; if you use bitmaprot as 16bits 8.8 fixed this is the fractional part
bitmaprot db 0

setupplasma:	;{{{
	ld hl,cptext
	ld (inserttextpoint),hl
	call makeemptychars
	call clearbuffers
	call transferbuf2col
	call translatebuf2char
	call swappage
	ld a,1
	ld (scrollcolcharcnt),a
	ld hl,scrolltxt
	ld (scrollcolchartxtpnt),hl
	di
	;wrvdp 16*15+4,7 ; white on blue normal
	;wrvdp 16*1+4,12 ; black on blue blink
	wrvdp 16*15+0,13 ; on/off time blink
	; set up write #4096+8*10 (only visible cahrs starting at chr$(10))
	;no commands so no chkvdp2
	wrvdp 0,45
	wrvdp 0,14
	ld a,10*8
	out (#99),a
	ld a,64+#10
	out (#99),a

	; now build the chars
	ld b,31
buildchars:	push bc
	ld a,32
	sub b
	add a,a
	add a,a
	add a,a
;	call chartovram ; old 2x4 pixelblocks
	call fillbuffer
	call dither
	call buffertochar
	call chartovram
	pop bc
	djnz buildchars

	ld b,31
buildchars2:	push bc
	ld a,b
	add a,a
	add a,a
	add a,a
;	call chartovram ; old 2x4 pixelblocks
	call fillbuffer
	call dither
	call buffertochar
	call chartovram
	pop bc
	djnz buildchars2
	ret
	;}}}

inserttext:	; {{{
	ld hl,(inserttextpoint)
inserttext1:
	ld a,h
	or l
	ret z
	ld e,(hl)
	inc hl
	ld d,(hl)
inserttext2:
	inc hl
	ld c,(hl)
	inc hl
	ld b,0
	ldir
	ld e,(hl)
	inc hl
	ld d,(hl)
	ld a,e
	or d
	ret z
	jp inserttext2
	ret
inserttextpoint: dw cptext
	; }}}
typetextinsert:	;{{{
	exx
	ld hl,(typetextcount)
	ld b,0
	ld e,b
	exx
	ld e,(hl)
	inc hl
	ld d,(hl)
typetextinsert2:
	inc hl
	ld a,(hl)
	exx
	;check if we still have sufficient bytes left
	ld c,a
	call cmphlbc
	jr c,typetextinsert3
	or a
	sbc hl,bc
	ld a,c
	jp typetextinsert4
typetextinsert3:
	inc e ; mark end of typing
	ld a,l
	or a
	jp z,typetextinsert9
typetextinsert4:
	exx
	ld c,a
	inc hl
	ld b,0
	ldir
bbbbbbbb:
	exx
	ld a,e  ; if we need to stop typing increase the counter
	exx
	or a
	jp nz,typetextinsert9
	ld e,(hl)
	inc hl
	ld d,(hl)
	ld a,e
	or d
	jp nz,typetextinsert2
	ret ; no more text to type

typetextinsert9:
	ld hl,(typetextcount)
	inc hl
	ld (typetextcount),hl
	ret
	;}}}
cmphlbc:	;{{{
	ld a,h
	cp b
	ret nz
	ld a,l
	cp c
	ret
	;}}}


translatebuf2char: ; {{{ screen 0, averaging two rows, clipping code is ommitted by filling the chars with the correct patterns :-)
	di
	xor a
	out (#99),a
	ld a,(pageaddr)
	or 64+#00
	out (#99),a
	ld hl,#8000
	ld c,#98
	ld b,24
translatebuf2char2:
	push bc
	ld b,40
translatebuf2char3:
	ld a,(hl)
	inc h
	add a,(hl)
	rra
	out(c),a

	inc l
	ld a,(hl)
	dec h
	add a,(hl)
	rra
	out(c),a

	inc l
	djnz translatebuf2char3 ;first 80 bytes
	ld l,0
	inc h
	inc h
	pop bc
	djnz translatebuf2char2
	ret
	; }}}

transferbuf2char: ; {{{ screen 0, simply move #8yxx per 80 chars to screen
	di
	xor a
	out (#99),a
	ld a,(pageaddr)
	or 64+#00
	out (#99),a
	ld hl,#8000
	ld c,#98
	ld b,24
transferbuf2char2:
	push bc
	ld b,80
	otir
	ld l,0
	inc h
	pop bc
	djnz transferbuf2char2
	ret
	; }}}

transferbuf2col: ; {{{ screen 0, simply move #8000-8*24 to colorpattern at vram #0800
	di
	xor a
	out (#99),a
	ld a,(pageaddr)
	or 64+#08
	out (#99),a
	ld hl,#8000-10*24
	ld c,#98
	ld b,24*10
	otir
	ret
	; }}}

pageaddr:	db #20
swappage:	ld a,(pageaddr)
	xor #20
	ld (pageaddr),a
	di 
	jp nz,swappage2
	;now will write to range #0000 - #1000 for cols and patterns
	; char defs stay at #1000
	; so display #2000.....
	wrvdp #0b,2
	wrvdp #A7,3
	ret
swappage2:
	; display layouttable at 0x0000, colortable at 0x0800
	wrvdp #03,2
	wrvdp #27,3
	ret

fillbuffer:	ld hl,buffer
	ld d,h
	ld e,l
	inc de
	ld bc,0+(BUFROWS+1)*(2+BUFCOLS)-1
	ld (hl),a
	ldir
	ret

dither:	;{{{ perform floyd steinbergh over the buffer, the buffer has an extra column at the left and right and an extra row to allow the error distribution code to be simpler
	ld ix,buffer+1
	ld b,BUFROWS
dither1:
	push bc
	ld b,BUFCOLS
dither2:
	push bc
	call dithercalc
	inc ix
	pop bc
	djnz dither2
	inc ix
	inc ix
	pop bc
	djnz dither1
	ret

dithercalc	; code that checks if value exceeds thresshold, adjusts the value and disperse the error over the other pixels in the buffer
	ld a,(ix+0)
	ld l,a	; store value in bc
	ld h,0
	cp 128
	jr nc,dithercalc1 ; value >= 128
	xor a
	jr dithercalc2
dithercalc1
	ld a,255
dithercalc2
	; now a is the new value
	ld (ix+0),a
	; now calculate the difference between new and old value and distribute the error
	ld c,a
	xor a ; resets the C-flag at the same time
	ld b,a
	sbc hl,bc ; hl=old-new
	; now distribute 1/16 of  the error to bottom right neighbour
	push hl
	divhlby16
	ld a,(ix+1+BUFCOLS+2)
	add a,l
	ld (ix+1+BUFCOLS+2),a
	pop hl
	; now distribute 3/16 of  the error to bottom left neighbour
	push hl
	ld b,h
	ld c,l
	add hl,hl
	add hl,bc
	divhlby16
	ld a,(ix+BUFCOLS+2-1)
	add a,l
	ld (ix+BUFCOLS+2-1),a
	pop hl
	; now distribute 5/16 of  the error to bottom neighbour
	push hl
	ld b,h
	ld c,l
	add hl,hl
	add hl,hl
	add hl,bc
	divhlby16
	ld a,(ix+BUFCOLS+2)
	add a,l
	ld (ix+BUFCOLS+2),a
	pop hl
	; now distribute 7/16 of  the error to right neighbour
	;push hl
	ld b,h
	ld c,l
	add hl,hl
	ld d,h
	ld e,l
	add hl,hl
	add hl,de
	add hl,bc
	divhlby16
	ld a,(ix+1)
	add a,l
	ld (ix+1),a
	;pop hl
	; Done with the error distribution
	ret
	;}}}

buffertochar:	; {{{
	ld de,chardef
	ld hl,buffer+1
	ld b,8
buffertochar2:
	push bc
	ld bc,8*256
	xor a
buffertochar4:
	ld a,(hl)
	inc hl
	add a,a ; bit 7 to carry
	rl c ; carry into bit 0
	djnz buffertochar4
	ld a,c
	inc hl
	inc hl
	ld (de),a
	inc de
	pop bc
	djnz buffertochar2
	ret
	;}}}

chartovram:	; copy chardef to vram addr 4096+32*8 (=#1100)
	ld bc,#98+8*256
	ld hl,chardef
	otir
	ret

RANDOM: ; {{{ routine voor random getallen
;; In A random getal 0-255
;; verandert A
;        PUSH    BC
;        LD      A,R
;        LD      C,A
;        RRCA
;        RRCA
;        RRCA
;        RRCA
;        XOR     C
;        AND     15
;        LD      C,A
;        LD      A,R
;        LD      B,A
;        RLCA
;        RLCA
;        RLCA
;        RLCA
;        XOR     B
;        AND     240
;        ADD     A,C
;        PUSH    AF
;        LD      A,(RNDGTL)
;        RLCA
;        LD      C,A
;        POP     AF
;        XOR     C
;        LD      (RNDGTL),A
;        POP     BC
;        RET
;
;RNDGTL: DEFB    0
        ;}}}

LFSR:	; {{{ routine implementing a 32bit Galois linear feedback shift register
	push hl
	ld hl,LFSRseed	; 10 T-states

	ld a,(hl)		; 7 T-states
	add a,a		; 4 T-states
	ld (hl),a
	inc hl

	ld a,(hl)		; 7 T-states
	adc a,a		; 4 T-states
	ld (hl),a
	inc hl

	ld a,(hl)		; 7 T-states
	adc a,a		; 4 T-states
	ld (hl),a
	inc hl

	ld a,(hl)		; 7 T-states
	adc a,a		; 4 T-states
	; if we shifted out 0 then we are done
	jp nc,LFSR2
	; othwerwise we xor with the mask (and set the high bit in this way!)
	xor #04
	ld (hl),a
	dec hl
	ld a,#C1
	xor (hl)
	ld (hl),a
	dec hl
	ld a,#1D
	xor (hl)
	ld (hl),a
	dec hl
	ld a,#B7
	xor (hl)
	ld (hl),a
	pop hl
	ret
LFSR2:
	ld (hl),a
	pop hl
	ld a,(LFSRseed)
	ret
LFSRseed:	db 1,0,0,0
	;}}}

clearblobs:	; {{{ Code to clear the blobs clip array
	; shorter version
	ld hl,#8000
	ld de,#8001
	ld b,BUFFERHEIGHT
clearblobs0:	push bc
	xor a
	ld (hl),a
	ld bc,80
	ldir
	pop bc
	inc h
	ld d,h
	ld l,0
	ld e,1
	djnz clearblobs0
	ret
	; end shorter version

	ld hl,blobinfo
	ld b,(hl)
	inc hl
clearblobs1:	push bc
	ld d,(hl)
	inc hl
	ld e,(hl)
	inc hl
	inc hl
	inc hl
	push hl
	call cliptorect
	call clearblobs2
	pop hl
	pop bc
	djnz clearblobs1
	ret

clearblobs2:	; zero out the info within the clipregion
	; determine start adres
	ld a,(clipdx)
	ld l,a
	ld a,(clipdy)
	or 128
	ld h,a
	ld a,(clipdh)
	ld b,a
clearblobs3:
	push hl
	push bc
	ld a,(clipdw)
	ld c,a
	ld e,l
	ld d,h
	inc e
	xor a
	ld b,a
	ld (hl),a
	ldir
	pop bc
	pop hl
	inc h
	djnz clearblobs3
	ret
	; }}}

addblobs:	; {{{ Code to add the blobs to the global buffer
	ld hl,blobinfo
	ld b,(hl)
	inc hl
addblobs1:	push bc
	ld d,(hl)
	inc hl
	ld e,(hl)
	inc hl
	inc hl
	inc hl
	push hl
	call cliptorect
	call addblobs2
	pop hl
	pop bc
	djnz addblobs1
	ret

addblobs2:	; add the info within the clipregion
	; determine start of source addres
	ld a,(clipsy)
	add a,a
	ld e,a
	ld a,(clipsx)
	ld d,a
	exx

	; determine start adres in destination buffer
	ld a,(clipdx)
	ld l,a
	ld a,(clipdy)
	or 128
	ld h,a
	ld a,(clipdh)
	ld b,a
addblobs3:
	push bc
	push hl
	ex de,hl

	ld h,blobdatapointers/256
	exx
	ld a,e
	inc e
	inc e
	exx
	ld l,a
	ld a,(hl)
	inc l
	ld h,(hl)
	ld l,a

	ld a,(clipsx)
	ld c,a
	ld a,(hl)	; a =offset of circle section on this row
	inc hl
	ld b,(hl)	;b = length of circle section on this row
	inc hl
	sub c
	jp nc,addblobsoff ; offset >= clipsx
	; here offset smaller then clipsx
	neg	; a = clipsx-offset
	ld c,a
	ld a,b ; a = length of circle section on this row
	ld b,0
	add hl,bc ; hl=skip diff clipsx-offset
	sub c ; a = length section - (clipsx-offset)
	ex de,hl
	ld b,a
	ld a,(clipdw)
	cp b
	jp nc,addblobs4
	ld b,a
	jp addblobs4

addblobsoff:	; here offset bigger then clipsx
	ld c,a
	ld a,b ; a = length of circle section on this row
	ld b,0
	ex de,hl
	add hl,bc ; hl=skip diff clipsx-offset
	ld b,a
	ld a,(clipdw)
	sub c
	;now check if circelsection < adjusted clipdw
	cp b
	jp nc,addblobs4
	ld b,a

	; now b is clipdw adjusted with offset
addblobs4:	; now jump  into the unrolled loop
	;ld a,(de)
	;add a,(hl)
	;ld (hl),a
	;inc de
	;inc l
	; we calculate entry point without altering hl,de,bc, and de'
	ld a,b
	exx
	ld hl,addblobs42
	push hl ; return point for unrolled loop
	ld l,a
	add a,a ; *2
	add a,a ; *4
	ld c,a
	xor a
	ld h,a
	ld b,a
	add hl,bc
	ld b,h
	ld c,l
	ld hl,endunrolled
	or a
	sbc hl,bc
	push hl
	exx
	ret
addblobs42:
	; is now unrolled ; djnz addblobs4
	pop hl
	pop bc
	inc h ; clipdy++
	djnz addblobs3
	ret
	; }}}

	;{{{ unrolled loop here
	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	ld a,(de)
	add a,(hl)
	ld (hl),a
	inc de
	inc l

	;}}}
endunrolled:	ret


moveblobs:	; {{{ Code to clear the blobs clip array
	ld hl,blobinfo
	ld b,(hl)
	inc hl
moveblobs2:	push bc
	ld d,(hl)
	inc hl
	ld e,(hl)
	inc hl
	ld b,(hl)
	inc hl
	ld c,(hl)
	push hl	; we do this hl trickery in case we want to use hl in moveblocks3
	dec hl
	dec hl
	dec hl
	call moveblobs3
	pop hl
	inc hl
	pop bc
	djnz moveblobs2
	ret

moveblobs3:
	ld a,d
	add a,b
	ld d,a
	cp BUFFERWIDTH
	jr c,moveblobs4
	; went from 0 to a neg number
	; or to the right over the border
	ld a,b
	neg
	ld b,a
	ld a,d
	add a,b
	add a,b
	ld d,a
moveblobs4:	
	; now the y
	ld a,e
	add a,c
	ld e,a
	cp BUFFERHEIGHT ; , that one is bigger then 2*screen
	jr c,moveblobs5
	; went from 0 to neg or over the max y
	ld a,c
	neg
	ld c,a
	ld a,e
	add a,c
	add a,c
	ld e,a
moveblobs5	;save the values again
	ld (hl),d
	inc hl
	ld (hl),e
	inc hl
	ld (hl),b
	inc hl
	ld (hl),c
	ret
	; }}}

;chartovram:	; {{{ create a char with the bits building up 3x2 pixel blocks
;	; so that we have a char pattern of
;	; 777666xx
;	; 777666xx
;	; 555444xx
;	; 555444xx
;	; 333222xx
;	; 333222xx
;	; 111000xx
;	; 111000xx
;	; each bit in A turns on the respective pixels
;	ld c,a
;	call chartovramdef ; bit 7 & 6
;	out (#98),a
;	out (#98),a
;	rl c
;	rl c
;	ld a,c
;	call chartovramdef ; bit 5 & 4
;	out (#98),a
;	out (#98),a
;	rl c
;	rl c
;	ld a,c
;	call chartovramdef ; bit 3 & 2
;	out (#98),a
;	out (#98),a
;	rl c
;	rl c
;	ld a,c
;	call chartovramdef ; bit 1 & 0
;	out (#98),a
;	out (#98),a
;	ret
;chartovramdef:	; {{{ use bit 7&6 to determine which pattern to push into the charpattern
;	; IN: A
;	; OUT: A
;	; CHANGES: AF
;	rlca
;	jr nc,chartovramdef4
;	; high pixel set
;	rlca
;	jr nc,chartovramdef2
;	ld a,#fa
;	ret
;chartovramdef2:	ld a,#e0
;	ret
;	; high pixel not set
;chartovramdef4: rlca
;	jr c,chartovramdef6
;	xor a
;	ret
;chartovramdef6:	ld a,#1c
;	ret
;	;}}}
;	; }}}

cliptorect:	; {{{ from center of circle (d=64) determine box to fill
	; we clip against a box of (0,0)-(BUFFERWIDTH,BUFFERHEIGHT)
	; IN: D=x center, E=y center
	; OUT: clipdx,clipdy,clipsx,clipsy,clipdw,clipdh
	; CHANGES: AF,DE,HL,BC
	ld a,d
	sub 32
	jr nc,cliptorect1
	; We are in the left border so we need to clip
	ld c,a
	neg
	ld (clipsx),a
	ld a,64
	add a,c
	ld (clipdw),a
	xor a
	ld (clipdx),a
	jr cliptorect3
cliptorect1:	; We are not touching the left border
	ld (clipdx),a
	; maybe we are touching the right border ?
	add a,64 ; no need to check for >255 since x always <= BUFFERWIDTH
	sub BUFFERWIDTH
	jr c,cliptorect2
	; we are in the right border 
	neg
	add a,64
	jr cliptorect21
cliptorect2:	; we are not in the right border
	ld a,64
cliptorect21:
	ld (clipdw),a
	xor a
	ld (clipsx),a
cliptorect3:	; now check the y coordinates

	; same logic as checking the x-axis
	ld a,e
	sub 32
	jr nc,cliptorect4
	; We are in the upper border so we need to clip
	ld c,a
	neg
	ld (clipsy),a
	ld a,64
	add a,c
	ld (clipdh),a
	xor a
	ld (clipdy),a
	ret
cliptorect4:	; We are not touching the upper border
	ld (clipdy),a
	; maybe we are touching the lower border ?
	add a,64 ; no need to check for >255 since x always <= BUFFERHEIGHT
	sub BUFFERHEIGHT
	jr c,cliptorect5
	; we are in the bottom border 
	neg
	add a,64
	jr cliptorect51
cliptorect5:	; we are not in the bottom border
	ld a,64
cliptorect51:
	ld (clipdh),a
	xor a
	ld (clipsy),a
	ret


	; }}}

clipdx 	db 0	; the destination x of the box
clipdy	db 0 	; the destination y of the box
clipdw	db 0	; the width of the box
clipdh	db 0	; the width of the destination of the box
clipsx	db 0	; the source x in the origin box around the center
clipsy 	db 0	; the source y in the origin box around the center

scrollcolchar:	; {{{
	ld a,(scrollcolcharcnt)
	dec a
	jp nz,scrollcolchar2
	; get next char
	ld hl,(scrollcolchartxtpnt)
	ld a,(hl)
	inc hl
	or a
	jp nz,scrollcolchar1
	ld hl,scrolltxt
	ld a,(hl)
	inc hl
scrollcolchar1:
	ld (scrollcolchartxtpnt),hl
	cp ' '
	jp nz,scrollcolchar11
scrollcolchar10:
	ld hl,bigfont_space
	ld a,8
	jp scrollcolchar19
scrollcolchar11: cp '9'+1
	jp nc,scrollcolchar12
	sub '0'
	jp scrollcolchar18
scrollcolchar12: cp 'Z'+1
	jp nc,scrollcolchar13
	sub 'A'-10
	jp scrollcolchar18
scrollcolchar13: cp 'z'+1
	jp nc,scrollcolchar10
	sub 'a'-26-10
scrollcolchar18:
	ld l,a
	add a,a
	add a,l
	ld l,a
	ld h,0
	ld de,bigfontdata
	add hl,de
	ld e,(hl)
	inc hl
	ld d,(hl)
	inc hl
	ld a,(hl)
	ex de,hl
scrollcolchar19:
	ld (scrollcolpointer),hl
scrollcolchar2:
	ld (scrollcolcharcnt),a
	;jp scrollcolcolumn
	;}}}
scrollcolcolumn: ; {{{
	ld hl,(scrollcolpointer)
	ld a,(hl)
	inc hl
	ld e,(hl)
	inc hl
	ld d,(hl)
	inc hl
	ld (scrollcolpointer),hl
	ld hl,#8000-1
	call scrollcolcolumn2
	ld a,e
	call scrollcolcolumn2
	ld a,d
scrollcolcolumn2:
	call scrollcolcolumn3
	call scrollcolcolumn3
	call scrollcolcolumn3
scrollcolcolumn3:
	add a,a
	rl (hl) ; 1
	dec hl
	rl (hl) ; 2
	dec hl
	rl (hl) ; 3
	dec hl
	rl (hl) ; 4
	dec hl
	rl (hl) ; 5
	dec hl
	rl (hl) ; 6
	dec hl
	rl (hl) ; 7
	dec hl
	rl (hl) ; 8
	dec hl
	rl (hl) ; 9
	dec hl
	rl (hl) ; 10
	dec hl
	add a,a
	rl (hl) ; 1
	dec hl
	rl (hl) ; 2
	dec hl
	rl (hl) ; 3
	dec hl
	rl (hl) ; 4
	dec hl
	rl (hl) ; 5
	dec hl
	rl (hl) ; 6
	dec hl
	rl (hl) ; 7
	dec hl
	rl (hl) ; 8
	dec hl
	rl (hl) ; 9
	dec hl
	rl (hl) ; 10
	dec hl
	ret
	; }}}
scrollcolpointer: dw bigfont_0
scrollcolcharcnt:	db 1
scrollcolchartxtpnt:	dw scrolltxt
scrolltxt:	db "  MSX2 screen 0 demo  ",0

prefontdata:	;{{{
 ;  !
 db %00100000
 db %00100000
 db %00100000
 db %00100000
 db %00000000
 db %00000000
 db %00100000
 db %00000000

 ;  "
 db %01010000
 db %01010000
 db %01010000
 db %00000000
 db %00000000
 db %00000000
 db %00000000
 db %00000000

 ;  #
 db %01010000
 db %01010000
 db %11111000
 db %01010000
 db %11111000
 db %01010000
 db %01010000
 db %00000000

 ;  $
 db %00100000
 db %01111000
 db %10100000
 db %01110000
 db %00101000
 db %11110000
 db %00100000
 db %00000000

 ;  %
 db %11000000
 db %11001000
 db %00010000
 db %00100000
 db %01000000
 db %10011000
 db %00011000
 db %00000000

 ;  &
 db %01000000
 db %10100000
 db %01000000
 db %10101000
 db %10010000
 db %10011000
 db %01100000
 db %00000000

 ;  '
 db %00010000
 db %00100000
 db %01000000
 db %00000000
 db %00000000
 db %00000000
 db %00000000
 db %00000000

 ;  (
 db %00010000
 db %00100000
 db %01000000
 db %01000000
 db %01000000
 db %00100000
 db %00010000
 db %00000000

 ;  )
 db %01000000
 db %00100000
 db %00010000
 db %00010000
 db %00010000
 db %00100000
 db %01000000
 db %00000000

 ;  *
 db %00100000
 db %10101000
 db %01110000
 db %00100000
 db %01110000
 db %10101000
 db %00100000
 db %00000000

 ;  +
 db %00000000
 db %00100000
 db %00100000
 db %11111000
 db %00100000
 db %00100000
 db %00000000
 db %00000000

 ;  ,
 db %00000000
 db %00000000
 db %00000000
 db %00000000
 db %00000000
 db %00100000
 db %00100000
 db %01000000

 ;  -
 db %00000000
 db %00000000
 db %00000000
 db %01111000
 db %00000000
 db %00000000
 db %00000000
 db %00000000

 ;  .
 db %00000000
 db %00000000
 db %00000000
 db %00000000
 db %00000000
 db %01100000
 db %01100000
 db %00000000

 ;  /
 db %00000000
 db %00000000
 db %00001000
 db %00010000
 db %00100000
 db %01000000
 db %10000000
 db %00000000
 ;}}}

fontdata ; {{{
 ;  0
 db %01110000
 db %10001000
 db %10011000
 db %10101000
 db %11001000
 db %10001000
 db %01110000
 db %00000000

 ;  1
 db %00100000
 db %01100000
 db %10100000
 db %00100000
 db %00100000
 db %00100000
 db %00100000
 db %00000000

 ;  2
 db %01110000
 db %10001000
 db %00001000
 db %00010000
 db %01100000
 db %10000000
 db %11111000
 db %00000000

 ;  3
 db %11110000
 db %00001000
 db %00001000
 db %00110000
 db %00001000
 db %00001000
 db %11110000
 db %00000000

 ;  4
 db %00010000
 db %00110000
 db %01010000
 db %10010000
 db %11111000
 db %00010000
 db %00010000
 db %00000000

 ;  5
 db %11111000
 db %10000000
 db %11110000
 db %00001000
 db %00001000
 db %00001000
 db %11110000
 db %00000000

 ;  6
 db %00110000
 db %01000000
 db %10000000
 db %11110000
 db %10001000
 db %10001000
 db %01110000
 db %00000000

 ;  7
 db %11111000
 db %00001000
 db %00010000
 db %00100000
 db %00100000
 db %00100000
 db %00100000
 db %00000000

 ;  8
 db %01110000
 db %10001000
 db %10001000
 db %01110000
 db %10001000
 db %10001000
 db %01110000
 db %00000000

 ;  9
 db %01110000
 db %10001000
 db %10001000
 db %01111000
 db %00001000
 db %00010000
 db %01100000
 db %00000000

 ;  A
 db %00100000
 db %01010000
 db %10001000
 db %10001000
 db %11111000
 db %10001000
 db %10001000
 db %00000000

 ;  B
 db %11110000
 db %01001000
 db %01001000
 db %01110000
 db %01001000
 db %01001000
 db %11110000
 db %00000000

 ;  C
 db %00110000
 db %01001000
 db %10000000
 db %10000000
 db %10000000
 db %01001000
 db %00110000
 db %00000000

 ;  D
 db %11100000
 db %10010000
 db %10001000
 db %10001000
 db %10001000
 db %10010000
 db %11100000
 db %00000000

 ;  E
 db %11111000
 db %10000000
 db %10000000
 db %11111000
 db %10000000
 db %10000000
 db %11111000
 db %00000000

 ;  F
 db %11111000
 db %10000000
 db %10000000
 db %11110000
 db %10000000
 db %10000000
 db %10000000
 db %00000000

 ;  G
 db %01110000
 db %10001000
 db %10000000
 db %10011000
 db %10001000
 db %10001000
 db %01110000
 db %00000000

 ;  H
 db %10001000
 db %10001000
 db %10001000
 db %11111000
 db %10001000
 db %10001000
 db %10001000
 db %00000000

 ;  I
 db %00100000
 db %00100000
 db %00100000
 db %00100000
 db %00100000
 db %00100000
 db %00100000
 db %00000000

 ;  J
 db %00010000
 db %00010000
 db %00010000
 db %00010000
 db %10010000
 db %10010000
 db %01100000
 db %00000000

 ;  K
 db %10001000
 db %10010000
 db %10100000
 db %11000000
 db %10100000
 db %10010000
 db %10001000
 db %00000000

 ;  L
 db %10000000
 db %10000000
 db %10000000
 db %10000000
 db %10000000
 db %10000000
 db %11111000
 db %00000000

 ;  M
 db %10001000
 db %11011000
 db %10101000
 db %10101000
 db %10001000
 db %10001000
 db %10001000
 db %00000000

 ;  N
 db %10001000
 db %11001000
 db %11001000
 db %10101000
 db %10011000
 db %10011000
 db %10001000
 db %00000000

 ;  O
 db %01110000
 db %10001000
 db %10001000
 db %10001000
 db %10001000
 db %10001000
 db %01110000
 db %00000000

 ;  P
 db %11110000
 db %10001000
 db %10001000
 db %11110000
 db %10000000
 db %10000000
 db %10000000
 db %00000000

 ;  Q
 db %01110000
 db %10001000
 db %10001000
 db %10001000
 db %10001000
 db %10010000
 db %01101000
 db %00000000

 ;  R
 db %11110000
 db %10001000
 db %10001000
 db %11110000
 db %10010000
 db %10001000
 db %10001000
 db %00000000

 ;  S
 db %01111000
 db %10000000
 db %10000000
 db %01110000
 db %00001000
 db %00001000
 db %11110000
 db %00000000

 ;  T
 db %11111000
 db %00100000
 db %00100000
 db %00100000
 db %00100000
 db %00100000
 db %00100000
 db %00000000

 ;  U
 db %10001000
 db %10001000
 db %10001000
 db %10001000
 db %10001000
 db %10001000
 db %01110000
 db %00000000

 ;  V
 db %10001000
 db %10001000
 db %10001000
 db %10001000
 db %01010000
 db %01010000
 db %00100000
 db %00000000

 ;  W
 db %10001000
 db %10001000
 db %10001000
 db %10101000
 db %10101000
 db %11011000
 db %10001000
 db %00000000

 ;  X
 db %10001000
 db %10001000
 db %01010000
 db %00100000
 db %01010000
 db %10001000
 db %10001000
 db %00000000

 ;  Y
 db %10001000
 db %10001000
 db %10001000
 db %01110000
 db %00100000
 db %00100000
 db %00100000
 db %00000000

 ;  Z
 db %11111000
 db %00001000
 db %00010000
 db %00100000
 db %01000000
 db %10000000
 db %11111000
 db %00000000

 ;  a
 db %00000000
 db %00000000
 db %01110000
 db %00001000
 db %01111000
 db %10001000
 db %01111000
 db %00000000

 ;  b
 db %10000000
 db %10000000
 db %11110000
 db %10001000
 db %10001000
 db %10001000
 db %11110000
 db %00000000

 ;  c
 db %00000000
 db %00000000
 db %01111000
 db %10000000
 db %10000000
 db %10000000
 db %01111000
 db %00000000

 ;  d
 db %00001000
 db %00001000
 db %01111000
 db %10001000
 db %10001000
 db %10001000
 db %01111000
 db %00000000

 ;  e
 db %00000000
 db %00000000
 db %01110000
 db %10001000
 db %11111000
 db %10000000
 db %01110000
 db %00000000

 ;  f
 db %00011000
 db %00100000
 db %00100000
 db %11111000
 db %00100000
 db %00100000
 db %00100000
 db %00000000

 ;  g
 db %00000000
 db %00000000
 db %01110000
 db %10001000
 db %10001000
 db %01111000
 db %00001000
 db %11110000

 ;  h
 db %10000000
 db %10000000
 db %11110000
 db %10001000
 db %10001000
 db %10001000
 db %10001000
 db %00000000

 ;  i
 db %00000000
 db %00100000
 db %00000000
 db %00100000
 db %00100000
 db %00100000
 db %00100000
 db %00000000

 ;  j
 db %00000000
 db %00010000
 db %00000000
 db %00010000
 db %00010000
 db %00010000
 db %10010000
 db %01100000

 ;  k
 db %01000000
 db %01000000
 db %01001000
 db %01010000
 db %01100000
 db %01010000
 db %01001000
 db %00000000

 ;  l
 db %01100000
 db %00100000
 db %00100000
 db %00100000
 db %00100000
 db %00100000
 db %00100000
 db %00000000

 ;  m
 db %00000000
 db %00000000
 db %11010000
 db %10101000
 db %10101000
 db %10101000
 db %10101000
 db %00000000

 ;  n
 db %00000000
 db %00000000
 db %10110000
 db %11001000
 db %10001000
 db %10001000
 db %10001000
 db %00000000

 ;  o
 db %00000000
 db %00000000
 db %01110000
 db %10001000
 db %10001000
 db %10001000
 db %01110000
 db %00000000

 ;  p
 db %00000000
 db %00000000
 db %11110000
 db %10001000
 db %10001000
 db %11110000
 db %10000000
 db %10000000

 ;  q
 db %00000000
 db %00000000
 db %01111000
 db %10001000
 db %10001000
 db %01111000
 db %00001000
 db %00001000

 ;  r
 db %00000000
 db %00000000
 db %10111000
 db %11000000
 db %10000000
 db %10000000
 db %10000000
 db %00000000

 ;  s
 db %00000000
 db %00000000
 db %01111000
 db %10000000
 db %11110000
 db %00001000
 db %11110000
 db %00000000

 ;  t
 db %01000000
 db %01000000
 db %01111000
 db %01000000
 db %01000000
 db %01000000
 db %00111000
 db %00000000

 ;  u
 db %00000000
 db %00000000
 db %10010000
 db %10010000
 db %10010000
 db %10010000
 db %01100000
 db %00000000

 ;  v
 db %00000000
 db %00000000
 db %10001000
 db %10001000
 db %10001000
 db %01010000
 db %00100000
 db %00000000

 ;  w
 db %00000000
 db %00000000
 db %10001000
 db %10101000
 db %10101000
 db %10101000
 db %01010000
 db %00000000

 ;  x
 db %00000000
 db %00000000
 db %10001000
 db %01010000
 db %00100000
 db %01010000
 db %10001000
 db %00000000

 ;  y
 db %00000000
 db %00000000
 db %10001000
 db %10001000
 db %10001000
 db %01111000
 db %00001000
 db %01110000

 ;  z
 db %00000000
 db %00000000
 db %11111000
 db %00010000
 db %00100000
 db %01000000
 db %11111000
 db %00000000

 ; }}}
fontdataend:

blobinfo:	db 4 ; now testing so not all 6 ; nr of blobs
;	db 12,15,0,1 ; x,y,speedx,speedy
;	db 23,4,1,0 ; x,y,speedx,speedy
	db 54,14,-1,1 ; x,y,speedx,speedy
	db 60,15,-1,-1 ; x,y,speedx,speedy
	db 12,5,1,1 ; x,y,speedx,speedy
	db 35,4,1,-1 ; x,y,speedx,speedy

blobsource
	; {{{
blobdata0: db  26,11  ,1,1,1,1,1,1,1,1,1,1,1 
blobdata1: db  22,19  ,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1 
blobdata2: db  19,25  ,1,1,1,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,1,1,1 
blobdata3: db  17,29  ,1,1,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,2,2,1,1,1 
blobdata4: db  15,33  ,1,1,2,2,2,3,3,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,3,3,2,2,2,1,1 
blobdata5: db  14,35  ,1,1,2,2,3,3,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,3,3,2,2,1,1 
blobdata6: db  13,37  ,1,2,2,3,3,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,5,5,5,5,5,5,5,4,4,3,3,2,2,1 
blobdata7: db  11,41  ,1,1,2,2,3,4,4,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,5,4,4,3,2,2,1,1 
blobdata8: db  10,43  ,1,1,2,3,3,4,4,5,5,5,5,6,6,6,6,6,6,8,8,8,8,8,8,8,8,8,6,6,6,6,6,6,5,5,5,5,4,4,3,3,2,1,1 
blobdata9: db  9,45  ,1,1,2,3,3,4,5,5,5,5,6,6,6,6,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,6,6,6,6,5,5,5,5,4,3,3,2,1,1 
blobdata10: db  8,47  ,1,1,2,3,4,4,5,5,5,6,6,6,6,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,8,8,8,8,8,8,6,6,6,6,5,5,5,4,4,3,2,1,1 
blobdata11: db  7,49  ,1,1,2,3,4,4,5,5,5,6,6,6,8,8,8,8,8,9,9,9,10,10,10,10,10,10,10,10,10,9,9,9,8,8,8,8,8,6,6,6,5,5,5,4,4,3,2,1,1 
blobdata12: db  7,49  ,1,2,3,4,4,5,5,5,6,6,6,8,8,8,8,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,8,8,8,8,6,6,6,5,5,5,4,4,3,2,1 
blobdata13: db  6,51  ,1,2,3,3,4,5,5,5,6,6,6,8,8,8,9,9,10,10,10,10,10,11,11,11,11,11,11,11,11,11,10,10,10,10,10,9,9,8,8,8,6,6,6,5,5,5,4,3,3,2,1 
blobdata14: db  5,53  ,1,2,2,3,4,5,5,5,6,6,8,8,8,8,9,10,10,10,10,11,11,11,12,12,12,12,12,12,12,12,12,11,11,11,10,10,10,10,9,8,8,8,8,6,6,5,5,5,4,3,2,2,1 
blobdata15: db  4,55  ,1,1,2,3,4,5,5,5,6,6,8,8,8,9,9,10,10,10,11,11,11,12,12,12,14,14,14,14,14,14,14,12,12,12,11,11,11,10,10,10,9,9,8,8,8,6,6,5,5,5,4,3,2,1,1 
blobdata16: db  4,55  ,1,2,3,4,4,5,5,6,6,6,8,8,9,9,10,10,10,11,11,12,12,14,14,14,16,16,16,16,16,16,16,14,14,14,12,12,11,11,10,10,10,9,9,8,8,6,6,6,5,5,4,4,3,2,1 
blobdata17: db  3,57  ,1,2,2,3,4,5,5,6,6,6,8,8,9,9,10,10,10,11,12,12,14,14,16,16,16,17,17,17,17,17,17,17,16,16,16,14,14,12,12,11,10,10,10,9,9,8,8,6,6,6,5,5,4,3,2,2,1 
blobdata18: db  3,57  ,1,2,3,4,5,5,5,6,6,8,8,8,9,10,10,10,11,12,12,14,16,16,17,17,17,19,19,19,19,19,19,19,17,17,17,16,16,14,12,12,11,10,10,10,9,8,8,8,6,6,5,5,5,4,3,2,1 
blobdata19: db  2,59  ,1,1,2,3,4,5,5,6,6,8,8,8,9,10,10,10,11,12,14,14,16,16,17,19,19,19,21,21,21,21,21,21,21,19,19,19,17,16,16,14,14,12,11,10,10,10,9,8,8,8,6,6,5,5,4,3,2,1,1 
blobdata20: db  2,59  ,1,2,3,4,5,5,5,6,6,8,8,9,10,10,10,11,12,14,14,16,17,17,19,19,21,21,23,23,23,23,23,23,23,21,21,19,19,17,17,16,14,14,12,11,10,10,10,9,8,8,6,6,5,5,5,4,3,2,1 
blobdata21: db  2,59  ,1,2,3,4,5,5,6,6,8,8,8,9,10,10,11,12,12,14,16,17,17,19,21,21,23,23,24,24,24,24,24,24,24,23,23,21,21,19,17,17,16,14,12,12,11,10,10,9,8,8,8,6,6,5,5,4,3,2,1 
blobdata22: db  1,61  ,1,2,3,4,4,5,5,6,6,8,8,9,10,10,11,11,12,14,16,17,17,19,21,21,23,24,24,24,26,26,26,26,26,24,24,24,23,21,21,19,17,17,16,14,12,11,11,10,10,9,8,8,6,6,5,5,4,4,3,2,1 
blobdata23: db  1,61  ,1,2,3,4,5,5,6,6,8,8,8,9,10,10,11,12,14,16,16,17,19,21,23,23,24,24,26,26,27,27,27,27,27,26,26,24,24,23,23,21,19,17,16,16,14,12,11,10,10,9,8,8,8,6,6,5,5,4,3,2,1 
blobdata24: db  1,61  ,1,2,3,4,5,5,6,6,8,8,9,10,10,11,11,12,14,16,17,19,21,21,23,24,26,26,27,27,28,28,28,28,28,27,27,26,26,24,23,21,21,19,17,16,14,12,11,11,10,10,9,8,8,6,6,5,5,4,3,2,1 
blobdata25: db  1,61  ,1,2,3,4,5,5,6,6,8,8,9,10,10,11,12,14,16,17,19,19,21,23,24,26,26,27,28,28,29,29,29,29,29,28,28,27,26,26,24,23,21,19,19,17,16,14,12,11,10,10,9,8,8,6,6,5,5,4,3,2,1 
blobdata26: db  0,63  ,1,2,3,4,5,5,5,6,6,8,8,9,10,10,11,12,14,16,17,19,21,23,24,24,26,27,28,28,29,30,30,30,30,30,29,28,28,27,26,24,24,23,21,19,17,16,14,12,11,10,10,9,8,8,6,6,5,5,5,4,3,2,1 
blobdata27: db  0,63  ,1,2,3,4,5,5,6,6,8,8,9,10,10,11,12,12,14,16,17,19,21,23,24,26,27,28,28,29,30,30,31,31,31,30,30,29,28,28,27,26,24,23,21,19,17,16,14,12,12,11,10,10,9,8,8,6,6,5,5,4,3,2,1 
blobdata28: db  0,63  ,1,2,3,4,5,5,6,6,8,8,9,10,10,11,12,14,16,17,19,21,23,24,24,26,27,28,29,30,31,31,31,31,31,31,31,30,29,28,27,26,24,24,23,21,19,17,16,14,12,11,10,10,9,8,8,6,6,5,5,4,3,2,1 
blobdata29: db  0,63  ,1,2,3,4,5,5,6,6,8,8,9,10,10,11,12,14,16,17,19,21,23,24,26,27,28,29,30,30,31,31,31,31,31,31,31,30,30,29,28,27,26,24,23,21,19,17,16,14,12,11,10,10,9,8,8,6,6,5,5,4,3,2,1 
blobdata30: db  0,63  ,1,2,3,4,5,5,6,6,8,8,9,10,10,11,12,14,16,17,19,21,23,24,26,27,28,29,30,31,31,31,31,31,31,31,31,31,30,29,28,27,26,24,23,21,19,17,16,14,12,11,10,10,9,8,8,6,6,5,5,4,3,2,1 
blobdata31: db  0,63  ,1,2,3,4,5,5,6,6,8,8,9,10,10,11,12,14,16,17,19,21,23,24,26,27,28,29,30,31,31,31,31,31,31,31,31,31,30,29,28,27,26,24,23,21,19,17,16,14,12,11,10,10,9,8,8,6,6,5,5,4,3,2,1 
blobdata32: db  0,63  ,1,2,3,4,5,5,6,6,8,8,9,10,10,11,12,14,16,17,19,21,23,24,26,27,28,29,30,31,31,31,31,31,31,31,31,31,30,29,28,27,26,24,23,21,19,17,16,14,12,11,10,10,9,8,8,6,6,5,5,4,3,2,1 
blobdata33: db  0,63  ,1,2,3,4,5,5,6,6,8,8,9,10,10,11,12,14,16,17,19,21,23,24,26,27,28,29,30,31,31,31,31,31,31,31,31,31,30,29,28,27,26,24,23,21,19,17,16,14,12,11,10,10,9,8,8,6,6,5,5,4,3,2,1 
blobdata34: db  0,63  ,1,2,3,4,5,5,6,6,8,8,9,10,10,11,12,14,16,17,19,21,23,24,26,27,28,29,30,30,31,31,31,31,31,31,31,30,30,29,28,27,26,24,23,21,19,17,16,14,12,11,10,10,9,8,8,6,6,5,5,4,3,2,1 
blobdata35: db  0,63  ,1,2,3,4,5,5,6,6,8,8,9,10,10,11,12,14,16,17,19,21,23,24,24,26,27,28,29,30,31,31,31,31,31,31,31,30,29,28,27,26,24,24,23,21,19,17,16,14,12,11,10,10,9,8,8,6,6,5,5,4,3,2,1 
blobdata36: db  0,63  ,1,2,3,4,5,5,6,6,8,8,9,10,10,11,12,12,14,16,17,19,21,23,24,26,27,28,28,29,30,30,31,31,31,30,30,29,28,28,27,26,24,23,21,19,17,16,14,12,12,11,10,10,9,8,8,6,6,5,5,4,3,2,1 
blobdata37: db  0,63  ,1,2,3,4,5,5,5,6,6,8,8,9,10,10,11,12,14,16,17,19,21,23,24,24,26,27,28,28,29,30,30,30,30,30,29,28,28,27,26,24,24,23,21,19,17,16,14,12,11,10,10,9,8,8,6,6,5,5,5,4,3,2,1 
blobdata38: db  1,61  ,1,2,3,4,5,5,6,6,8,8,9,10,10,11,12,14,16,17,19,19,21,23,24,26,26,27,28,28,29,29,29,29,29,28,28,27,26,26,24,23,21,19,19,17,16,14,12,11,10,10,9,8,8,6,6,5,5,4,3,2,1 
blobdata39: db  1,61  ,1,2,3,4,5,5,6,6,8,8,9,10,10,11,11,12,14,16,17,19,21,21,23,24,26,26,27,27,28,28,28,28,28,27,27,26,26,24,23,21,21,19,17,16,14,12,11,11,10,10,9,8,8,6,6,5,5,4,3,2,1 
blobdata40: db  1,61  ,1,2,3,4,5,5,6,6,8,8,8,9,10,10,11,12,14,16,16,17,19,21,23,23,24,24,26,26,27,27,27,27,27,26,26,24,24,23,23,21,19,17,16,16,14,12,11,10,10,9,8,8,8,6,6,5,5,4,3,2,1 
blobdata41: db  1,61  ,1,2,3,4,4,5,5,6,6,8,8,9,10,10,11,11,12,14,16,17,17,19,21,21,23,24,24,24,26,26,26,26,26,24,24,24,23,21,21,19,17,17,16,14,12,11,11,10,10,9,8,8,6,6,5,5,4,4,3,2,1 
blobdata42: db  2,59  ,1,2,3,4,5,5,6,6,8,8,8,9,10,10,11,12,12,14,16,17,17,19,21,21,23,23,24,24,24,24,24,24,24,23,23,21,21,19,17,17,16,14,12,12,11,10,10,9,8,8,8,6,6,5,5,4,3,2,1 
blobdata43: db  2,59  ,1,2,3,4,5,5,5,6,6,8,8,9,10,10,10,11,12,14,14,16,17,17,19,19,21,21,23,23,23,23,23,23,23,21,21,19,19,17,17,16,14,14,12,11,10,10,10,9,8,8,6,6,5,5,5,4,3,2,1 
blobdata44: db  2,59  ,1,1,2,3,4,5,5,6,6,8,8,8,9,10,10,10,11,12,14,14,16,16,17,19,19,19,21,21,21,21,21,21,21,19,19,19,17,16,16,14,14,12,11,10,10,10,9,8,8,8,6,6,5,5,4,3,2,1,1 
blobdata45: db  3,57  ,1,2,3,4,5,5,5,6,6,8,8,8,9,10,10,10,11,12,12,14,16,16,17,17,17,19,19,19,19,19,19,19,17,17,17,16,16,14,12,12,11,10,10,10,9,8,8,8,6,6,5,5,5,4,3,2,1 
blobdata46: db  3,57  ,1,2,2,3,4,5,5,6,6,6,8,8,9,9,10,10,10,11,12,12,14,14,16,16,16,17,17,17,17,17,17,17,16,16,16,14,14,12,12,11,10,10,10,9,9,8,8,6,6,6,5,5,4,3,2,2,1 
blobdata47: db  4,55  ,1,2,3,4,4,5,5,6,6,6,8,8,9,9,10,10,10,11,11,12,12,14,14,14,16,16,16,16,16,16,16,14,14,14,12,12,11,11,10,10,10,9,9,8,8,6,6,6,5,5,4,4,3,2,1 
blobdata48: db  4,55  ,1,1,2,3,4,5,5,5,6,6,8,8,8,9,9,10,10,10,11,11,11,12,12,12,14,14,14,14,14,14,14,12,12,12,11,11,11,10,10,10,9,9,8,8,8,6,6,5,5,5,4,3,2,1,1 
blobdata49: db  5,53  ,1,2,2,3,4,5,5,5,6,6,8,8,8,8,9,10,10,10,10,11,11,11,12,12,12,12,12,12,12,12,12,11,11,11,10,10,10,10,9,8,8,8,8,6,6,5,5,5,4,3,2,2,1 
blobdata50: db  6,51  ,1,2,3,3,4,5,5,5,6,6,6,8,8,8,9,9,10,10,10,10,10,11,11,11,11,11,11,11,11,11,10,10,10,10,10,9,9,8,8,8,6,6,6,5,5,5,4,3,3,2,1 
blobdata51: db  7,49  ,1,2,3,4,4,5,5,5,6,6,6,8,8,8,8,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,8,8,8,8,6,6,6,5,5,5,4,4,3,2,1 
blobdata52: db  7,49  ,1,1,2,3,4,4,5,5,5,6,6,6,8,8,8,8,8,9,9,9,10,10,10,10,10,10,10,10,10,9,9,9,8,8,8,8,8,6,6,6,5,5,5,4,4,3,2,1,1 
blobdata53: db  8,47  ,1,1,2,3,4,4,5,5,5,6,6,6,6,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,8,8,8,8,8,8,6,6,6,6,5,5,5,4,4,3,2,1,1 
blobdata54: db  9,45  ,1,1,2,3,3,4,5,5,5,5,6,6,6,6,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,6,6,6,6,5,5,5,5,4,3,3,2,1,1 
blobdata55: db  10,43  ,1,1,2,3,3,4,4,5,5,5,5,6,6,6,6,6,6,8,8,8,8,8,8,8,8,8,6,6,6,6,6,6,5,5,5,5,4,4,3,3,2,1,1 
blobdata56: db  11,41  ,1,1,2,2,3,4,4,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,5,4,4,3,2,2,1,1 
blobdata57: db  13,37  ,1,2,2,3,3,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,5,5,5,5,5,5,5,4,4,3,3,2,2,1 
blobdata58: db  14,35  ,1,1,2,2,3,3,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,3,3,2,2,1,1 
blobdata59: db  15,33  ,1,1,2,2,2,3,3,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,3,3,2,2,2,1,1 
blobdata60: db  17,29  ,1,1,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,2,2,1,1,1 
blobdata61: db  19,25  ,1,1,1,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,1,1,1 
blobdata62: db  22,19  ,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1 
blobdata63: db  26,11  ,1,1,1,1,1,1,1,1,1,1,1 
 ; }}}
blobsourceend

firetext:	dw #9700
	db firetext2-firetext1
firetext1
	db 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145
	db 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127
	db 128,128, 196,194,195,198,193,207,230,251,238,233,193,211,234,247,234,242,230,243,248 ,128,128
	db 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144
	db 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155
firetext2
	dw 0
cptext:
	dw #AE3B  ; x= 59 , y= 46 
	db  19   ; '2014 David Heremans'
	db   196,194,195,198,193,207,230,251,238,233,193,211,234,247,234,242,230,243,248
	dw #AF3B  ; x= 59 , y= 47 
	db  19   ; '2014 David Heremans'
	db   196,194,195,198,193,207,230,251,238,233,193,211,234,247,234,242,230,243,248
	dw 0

welcometxt:
	dw #801A
	db 28
	db "Welcome",0,"to",0,"the",0,"screen",0,"0",0,"demo"
	dw #8220
	db 28
	db "Welcome",0,"to",0,"the",0,"screen",0,"0",0,"demo"
	dw #8410
	db 28
	db "Welcome",0,"to",0,"the",0,"screen",0,"0",0,"demo"
	dw #861A
	db 28
	db "Welcome",0,"to",0,"the",0,"screen",0,"0",0,"demo"
	dw #881C
	db 28
	db "Welcome",0,"to",0,"the",0,"screen",0,"0",0,"demo"
	dw #891C
	db 28
	db "Welcome",0,"to",0,"the",0,"screen",0,"0",0,"demo"
	dw #8a1C
	db 28
	db "Welcome",0,"to",0,"the",0,"screen",0,"0",0,"demo"
	dw #8b1C
	db 28
	db "Welcome",0,"to",0,"the",0,"screen",0,"0",0,"demo"
	dw #8c1C
	db 28
	db "Welcome",0,"to",0,"the",0,"screen",0,"0",0,"demo"
	dw #8d1C
	db 28
	db "Welcome",0,"to",0,"the",0,"screen",0,"0",0,"demo"
	dw #8e1C
	db 28
	db "Welcome",0,"to",0,"the",0,"screen",0,"0",0,"demo"
	dw 0
bigfontdata ; {{{
	dw bigfont_0
	db (bigfont_0_end - bigfont_0)/3
	dw bigfont_1
	db (bigfont_1_end - bigfont_1)/3
	dw bigfont_2
	db (bigfont_2_end - bigfont_2)/3
	dw bigfont_3
	db (bigfont_3_end - bigfont_3)/3
	dw bigfont_4
	db (bigfont_4_end - bigfont_4)/3
	dw bigfont_5
	db (bigfont_5_end - bigfont_5)/3
	dw bigfont_6
	db (bigfont_6_end - bigfont_6)/3
	dw bigfont_7
	db (bigfont_7_end - bigfont_7)/3
	dw bigfont_8
	db (bigfont_8_end - bigfont_8)/3
	dw bigfont_9
	db (bigfont_9_end - bigfont_9)/3
	dw bigfont_A
	db (bigfont_A_end - bigfont_A)/3
	dw bigfont_B
	db (bigfont_B_end - bigfont_B)/3
	dw bigfont_C
	db (bigfont_C_end - bigfont_C)/3
	dw bigfont_D
	db (bigfont_D_end - bigfont_D)/3
	dw bigfont_E
	db (bigfont_E_end - bigfont_E)/3
	dw bigfont_F
	db (bigfont_F_end - bigfont_F)/3
	dw bigfont_G
	db (bigfont_G_end - bigfont_G)/3
	dw bigfont_H
	db (bigfont_H_end - bigfont_H)/3
	dw bigfont_I
	db (bigfont_I_end - bigfont_I)/3
	dw bigfont_J
	db (bigfont_J_end - bigfont_J)/3
	dw bigfont_K
	db (bigfont_K_end - bigfont_K)/3
	dw bigfont_L
	db (bigfont_L_end - bigfont_L)/3
	dw bigfont_M
	db (bigfont_M_end - bigfont_M)/3
	dw bigfont_N
	db (bigfont_N_end - bigfont_N)/3
	dw bigfont_O
	db (bigfont_O_end - bigfont_O)/3
	dw bigfont_P
	db (bigfont_P_end - bigfont_P)/3
	dw bigfont_Q
	db (bigfont_Q_end - bigfont_Q)/3
	dw bigfont_R
	db (bigfont_R_end - bigfont_R)/3
	dw bigfont_S
	db (bigfont_S_end - bigfont_S)/3
	dw bigfont_T
	db (bigfont_T_end - bigfont_T)/3
	dw bigfont_U
	db (bigfont_U_end - bigfont_U)/3
	dw bigfont_V
	db (bigfont_V_end - bigfont_V)/3
	dw bigfont_W
	db (bigfont_W_end - bigfont_W)/3
	dw bigfont_X
	db (bigfont_X_end - bigfont_X)/3
	dw bigfont_Y
	db (bigfont_Y_end - bigfont_Y)/3
	dw bigfont_Z
	db (bigfont_Z_end - bigfont_Z)/3

	dw bigfont_a_s
	db (bigfont_a_end_s - bigfont_a_s)/3
	dw bigfont_b_s
	db (bigfont_b_end_s - bigfont_b_s)/3
	dw bigfont_c_s
	db (bigfont_c_end_s - bigfont_c_s)/3
	dw bigfont_d_s
	db (bigfont_d_end_s - bigfont_d_s)/3
	dw bigfont_e_s
	db (bigfont_e_end_s - bigfont_e_s)/3
	dw bigfont_f_s
	db (bigfont_f_end_s - bigfont_f_s)/3
	dw bigfont_g_s
	db (bigfont_g_end_s - bigfont_g_s)/3
	dw bigfont_h_s
	db (bigfont_h_end_s - bigfont_h_s)/3
	dw bigfont_i_s
	db (bigfont_i_end_s - bigfont_i_s)/3
	dw bigfont_j_s
	db (bigfont_j_end_s - bigfont_j_s)/3
	dw bigfont_k_s
	db (bigfont_k_end_s - bigfont_k_s)/3
	dw bigfont_l_s
	db (bigfont_l_end_s - bigfont_l_s)/3
	dw bigfont_m_s
	db (bigfont_m_end_s - bigfont_m_s)/3
	dw bigfont_n_s
	db (bigfont_n_end_s - bigfont_n_s)/3
	dw bigfont_o_s
	db (bigfont_o_end_s - bigfont_o_s)/3
	dw bigfont_p_s
	db (bigfont_p_end_s - bigfont_p_s)/3
	dw bigfont_q_s
	db (bigfont_q_end_s - bigfont_q_s)/3
	dw bigfont_r_s
	db (bigfont_r_end_s - bigfont_r_s)/3
	dw bigfont_s_s
	db (bigfont_s_end_s - bigfont_s_s)/3
	dw bigfont_t_s
	db (bigfont_t_end_s - bigfont_t_s)/3
	dw bigfont_u_s
	db (bigfont_u_end_s - bigfont_u_s)/3
	dw bigfont_v_s
	db (bigfont_v_end_s - bigfont_v_s)/3
	dw bigfont_w_s
	db (bigfont_w_end_s - bigfont_w_s)/3
	dw bigfont_x_s
	db (bigfont_x_end_s - bigfont_x_s)/3
	dw bigfont_y_s
	db (bigfont_y_end_s - bigfont_y_s)/3
	dw bigfont_z_s
	db (bigfont_z_end_s - bigfont_z_s)/3
; 0
bigfont_0
  db %00000111,%11111111,%11110000
  db %00001111,%11111111,%11111000
  db %00011111,%11111111,%11111100
  db %00111101,%11100000,%00011110
  db %00111000,%11100000,%00001110
  db %00111000,%11110000,%00001110
  db %00111000,%00111100,%00001110
  db %00111000,%00011100,%00001110
  db %00111000,%00011110,%00001110
  db %00111000,%00000111,%10001110
  db %00111000,%00000011,%10001110
  db %00111100,%00000011,%11011110
  db %00011111,%11111111,%11111100
  db %00001111,%11111111,%11111000
  db %00000111,%11111111,%11110000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_0_end
; 1
bigfont_1
  db %00000000,%00000011,%11000000
  db %00000000,%00000011,%11100000
  db %00000000,%00000001,%11110000
  db %00000000,%00000000,%11111000
  db %00000000,%00000000,%01111100
  db %00111111,%11111111,%11111110
  db %00111111,%11111111,%11111110
  db %00111111,%11111111,%11111110
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_1_end
; 2
bigfont_2
  db %00111111,%00000000,%01110000
  db %00111111,%10000000,%01111000
  db %00111111,%11000000,%01111100
  db %00111001,%11100000,%00011110
  db %00111000,%11100000,%00001110
  db %00111000,%11110000,%00001110
  db %00111000,%11111000,%00001110
  db %00111000,%01111100,%00001110
  db %00111000,%00111110,%00001110
  db %00111000,%00011111,%00011110
  db %00111000,%00001111,%11111100
  db %00111000,%00000111,%11111000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_2_end
; 3
bigfont_3
  db %00000111,%00000000,%01110000
  db %00001111,%00000000,%01111000
  db %00011111,%00000000,%01111100
  db %00111100,%00000000,%00011110
  db %00111000,%00000000,%00001110
  db %00111000,%00011100,%00001110
  db %00111000,%00011100,%00001110
  db %00111000,%00011100,%00001110
  db %00111000,%00111110,%00011110
  db %00011111,%11110111,%11111100
  db %00001111,%11100011,%11111000
  db %00000111,%11100011,%11110000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_3_end
; 4
bigfont_4
  db %00000000,%11111100,%00000000
  db %00000000,%11111110,%00000000
  db %00000000,%11111111,%00000000
  db %00000000,%11100111,%10000000
  db %00000000,%11100011,%11000000
  db %00000000,%11100001,%11100000
  db %00000000,%11100000,%11110000
  db %00000000,%11100000,%01111000
  db %00000000,%11100000,%01111100
  db %00111111,%11111111,%11111110
  db %00111111,%11111111,%11111110
  db %00111111,%11111111,%11111110
  db %00000000,%11100000,%00000000
  db %00000000,%11100000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_4_end
; 5
bigfont_5
  db %00111000,%00000011,%11111110
  db %00111000,%00000011,%11111110
  db %00111000,%00000011,%11111110
  db %00111000,%00000011,%10001110
  db %00111000,%00000011,%10001110
  db %00111000,%00000011,%10001110
  db %00111100,%00000111,%00001110
  db %00111110,%00001111,%00001110
  db %00011111,%00011110,%00001110
  db %00001111,%00011110,%00001110
  db %00000111,%10111100,%00001110
  db %00000011,%11111000,%00001110
  db %00000001,%11110000,%00001110
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_5_end
; 6
bigfont_6
  db %00000111,%11111111,%10000000
  db %00001111,%11111111,%11000000
  db %00011111,%11111111,%11100000
  db %00111100,%00111100,%11110000
  db %00111000,%00011100,%01111000
  db %00111000,%00011100,%01111100
  db %00111000,%00011100,%00111110
  db %00111000,%00011100,%00011110
  db %00111000,%00011100,%00001110
  db %00111000,%00011100,%00001110
  db %00111000,%00011100,%00001110
  db %00111100,%00111100,%00001110
  db %00011111,%11111000,%00000000
  db %00001111,%11110000,%00000000
  db %00000111,%11100000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_6_end
; 7
bigfont_7
  db %00000000,%00000000,%00011110
  db %00000000,%00000000,%00011110
  db %00000000,%00000000,%00001110
  db %00000000,%00000000,%00001110
  db %00111111,%11111100,%00001110
  db %00111111,%11111110,%00001110
  db %00111111,%11111111,%00001110
  db %00000000,%00001111,%10001110
  db %00000000,%00000111,%10001110
  db %00000000,%00000011,%10001110
  db %00000000,%00000001,%11111110
  db %00000000,%00000000,%11111110
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_7_end
; 8
bigfont_8
  db %00000111,%11000001,%11110000
  db %00001111,%11100011,%11111000
  db %00011111,%11110111,%11111100
  db %00111100,%00111110,%00011110
  db %00111000,%00011100,%00001110
  db %00111000,%00011100,%00001110
  db %00111000,%00011100,%00001110
  db %00111000,%00011100,%00001110
  db %00111000,%00011100,%00001110
  db %00111100,%00111110,%00011110
  db %00011111,%11110111,%11111100
  db %00001111,%11100011,%11111000
  db %00000111,%11000001,%11110000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_8_end
; 9
bigfont_9
  db %00000000,%00000011,%11110000
  db %00000000,%00000111,%11111000
  db %00000000,%00001111,%11111100
  db %00111000,%00011110,%00011110
  db %00111000,%00011100,%00001110
  db %00111100,%00011100,%00001110
  db %00111100,%00011100,%00001110
  db %00011110,%00011100,%00001110
  db %00001111,%00011100,%00001110
  db %00000111,%00011110,%00011110
  db %00000011,%11111111,%11111100
  db %00000001,%11111111,%11111000
  db %00000000,%11111111,%11110000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_9_end
; A
bigfont_A
  db %00111111,%11111111,%00000000
  db %00111111,%11111111,%11000000
  db %00111111,%11111111,%11100000
  db %00000000,%11100000,%11110000
  db %00000000,%11100000,%01111000
  db %00000000,%11100000,%00111100
  db %00000000,%11100000,%00011110
  db %00000000,%11100000,%00001110
  db %00000000,%11100000,%00011110
  db %00000000,%11100000,%00111100
  db %00000000,%11100000,%01111000
  db %00000000,%11100000,%11110000
  db %00111111,%11111111,%11100000
  db %00111111,%11111111,%11000000
  db %00111111,%11111111,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_A_end
; B
bigfont_B
  db %00111111,%11111111,%11111110
  db %00111111,%11111111,%11111110
  db %00111111,%11111111,%11111110
  db %00111000,%00011100,%00001110
  db %00111000,%00011100,%00001110
  db %00111000,%00011100,%00001110
  db %00111000,%00011100,%00001110
  db %00111000,%00011100,%00001110
  db %00111000,%00011100,%00001110
  db %00111000,%00111110,%00011110
  db %00011111,%11110111,%11111100
  db %00001111,%11100011,%11111000
  db %00000111,%11000001,%11110000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_B_end
; C
bigfont_C
  db %00000000,%01111111,%00000000
  db %00000001,%11111111,%11000000
  db %00000011,%11111111,%11100000
  db %00000111,%10000000,%11110000
  db %00001111,%00000000,%01111000
  db %00011110,%00000000,%00111100
  db %00111100,%00000000,%00011110
  db %00111000,%00000000,%00001110
  db %00111000,%00000000,%00001110
  db %00111000,%00000000,%00001110
  db %00111000,%00000000,%00001110
  db %00111000,%00000000,%00001110
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_C_end
; D
bigfont_D
  db %00111111,%11111111,%11111110
  db %00111111,%11111111,%11111110
  db %00111111,%11111111,%11111110
  db %00111000,%00000000,%00001110
  db %00111000,%00000000,%00001110
  db %00111000,%00000000,%00001110
  db %00111100,%00000000,%00011110
  db %00111110,%00000000,%00111110
  db %00011111,%00000000,%01111100
  db %00001111,%10000000,%11111000
  db %00000011,%11111111,%11110000
  db %00000001,%11111111,%11000000
  db %00000000,%11111111,%10000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_D_end
; E
bigfont_E
  db %00111111,%11111111,%11111110
  db %00111111,%11111111,%11111110
  db %00111111,%11111111,%11111110
  db %00111000,%00011100,%00001110
  db %00111000,%00011100,%00001110
  db %00111000,%00011100,%00001110
  db %00111000,%00011100,%00001110
  db %00111000,%00011100,%00001110
  db %00111000,%00011100,%00001110
  db %00111000,%00011100,%00001110
  db %00111000,%00011100,%00001110
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_E_end
; F
bigfont_F
  db %00111111,%11111111,%11111110
  db %00111111,%11111111,%11111110
  db %00111111,%11111111,%11111110
  db %00000000,%00011100,%00001110
  db %00000000,%00011100,%00001110
  db %00000000,%00011100,%00001110
  db %00000000,%00011100,%00001110
  db %00000000,%00011100,%00001110
  db %00000000,%00011100,%00001110
  db %00000000,%00000000,%00001110
  db %00000000,%00000000,%00001110
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_F_end
; G
bigfont_G
  db %00000111,%11111111,%11110000
  db %00001111,%11111111,%11111000
  db %00011111,%11111111,%11111100
  db %00111100,%00000000,%00011110
  db %00111000,%00000000,%00001110
  db %00111000,%00000000,%00001110
  db %00111000,%00011100,%00001110
  db %00111000,%00011100,%00001110
  db %00111000,%00011100,%00001110
  db %00111100,%00011100,%00011110
  db %00011111,%11111100,%01111100
  db %00001111,%11111100,%01111000
  db %00000111,%11111100,%01110000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_G_end
; H
bigfont_H
  db %00111111,%11111111,%11111110
  db %00111111,%11111111,%11111110
  db %00111111,%11111111,%11111110
  db %00000000,%00011100,%00000000
  db %00000000,%00011100,%00000000
  db %00000000,%00011100,%00000000
  db %00000000,%00011100,%00000000
  db %00000000,%00011100,%00000000
  db %00000000,%00011100,%00000000
  db %00000000,%00011100,%00000000
  db %00111111,%11111111,%11111110
  db %00111111,%11111111,%11111110
  db %00111111,%11111111,%11111110
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_H_end
; I
bigfont_I
  db %00111000,%00000000,%00001110
  db %00111111,%11111111,%11111110
  db %00111111,%11111111,%11111110
  db %00111111,%11111111,%11111110
  db %00111000,%00000000,%00001110
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_I_end
; J
bigfont_J
  db %00011110,%00000000,%00000000
  db %00111100,%00000000,%00000000
  db %00111000,%00000000,%00000000
  db %00111000,%00000000,%00000000
  db %00111100,%00000000,%00001110
  db %00111111,%11111111,%11111110
  db %00011111,%11111111,%11111110
  db %00001111,%11111111,%11111110
  db %00000000,%00000000,%00001110
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_J_end
; K
bigfont_K
  db %00111111,%11111111,%11111110
  db %00111111,%11111111,%11111110
  db %00111111,%11111111,%11111110
  db %00000000,%00111110,%00000000
  db %00000000,%01111111,%00000000
  db %00000000,%11110111,%10000000
  db %00000001,%11100011,%11000000
  db %00000011,%11100011,%11100000
  db %00000111,%11000001,%11110000
  db %00001111,%10000000,%11111000
  db %00011111,%00000000,%01111100
  db %00111100,%00000000,%00011110
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_K_end
; L
bigfont_L
  db %00111111,%11111111,%11111110
  db %00111111,%11111111,%11111110
  db %00111111,%11111111,%11111110
  db %00111000,%00000000,%00000000
  db %00111000,%00000000,%00000000
  db %00111000,%00000000,%00000000
  db %00111000,%00000000,%00000000
  db %00111000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_L_end
; M
bigfont_M
  db %00111111,%11111111,%11111110
  db %00111111,%11111111,%11111110
  db %00111111,%11111111,%11111110
  db %00000000,%00000000,%01111100
  db %00000000,%00000000,%11111000
  db %00000000,%00000001,%11110000
  db %00000000,%00011111,%11100000
  db %00000000,%00111111,%11000000
  db %00000000,%00011111,%11100000
  db %00000000,%00000001,%11110000
  db %00000000,%00000000,%11111000
  db %00000000,%00000000,%01111100
  db %00111111,%11111111,%11111110
  db %00111111,%11111111,%11111110
  db %00111111,%11111111,%11111110
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_M_end
; N
bigfont_N
  db %00111111,%11111111,%11111110
  db %00111111,%11111111,%11111110
  db %00111111,%11111111,%11111110
  db %00000000,%00000011,%11111000
  db %00000000,%00000111,%11110000
  db %00000000,%00001111,%11100000
  db %00000000,%00011111,%11000000
  db %00000000,%00111111,%10000000
  db %00000000,%01111111,%00000000
  db %00000000,%11111110,%00000000
  db %00111111,%11111111,%11111110
  db %00111111,%11111111,%11111110
  db %00111111,%11111111,%11111110
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_N_end
; O
bigfont_O
  db %00000111,%11111111,%11110000
  db %00001111,%11111111,%11111000
  db %00011111,%11111111,%11111100
  db %00111100,%00000000,%00011110
  db %00111000,%00000000,%00001110
  db %00111000,%00000000,%00001110
  db %00111000,%00000000,%00001110
  db %00111000,%00000000,%00001110
  db %00111000,%00000000,%00001110
  db %00111100,%00000000,%00011110
  db %00011111,%11111111,%11111100
  db %00001111,%11111111,%11111000
  db %00000111,%11111111,%11110000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_O_end
; P
bigfont_P
  db %00111111,%11111111,%11111110
  db %00111111,%11111111,%11111110
  db %00111111,%11111111,%11111110
  db %00000000,%00011100,%00001110
  db %00000000,%00011100,%00001110
  db %00000000,%00011100,%00001110
  db %00000000,%00011100,%00001110
  db %00000000,%00011100,%00001110
  db %00000000,%00011100,%00001110
  db %00000000,%00011110,%00011110
  db %00000000,%00001111,%11111100
  db %00000000,%00000111,%11111000
  db %00000000,%00000011,%11110000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_P_end
; Q
bigfont_Q
  db %00000111,%11111111,%11110000
  db %00001111,%11111111,%11111000
  db %00011111,%11111111,%11111100
  db %00111100,%00000000,%00011110
  db %00111000,%00000000,%00001110
  db %00111000,%00000000,%00001110
  db %00111000,%01100000,%00001110
  db %00111000,%11100000,%00001110
  db %00110001,%11100000,%00001110
  db %00000111,%10000000,%00001110
  db %00001111,%00000000,%00001110
  db %00011111,%00000000,%00011110
  db %00111110,%01111111,%11111100
  db %00111100,%11111111,%11111000
  db %00111000,%11111111,%11110000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_Q_end
; R
bigfont_R
  db %00111111,%11111111,%11111110
  db %00111111,%11111111,%11111110
  db %00111111,%11111111,%11111110
  db %00000000,%01111100,%00001110
  db %00000000,%11111100,%00001110
  db %00000001,%11111100,%00001110
  db %00000011,%11111100,%00001110
  db %00000111,%11011100,%00001110
  db %00001111,%10011100,%00001110
  db %00011111,%00011110,%00011110
  db %00111110,%00001111,%11111100
  db %00111100,%00000111,%11111000
  db %00111000,%00000011,%11110000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_R_end
; S
bigfont_S
  db %00000111,%00000011,%11110000
  db %00001111,%00000111,%11111000
  db %00011111,%00001111,%11111100
  db %00111100,%00011110,%00011110
  db %00111000,%00011100,%00001110
  db %00111000,%00011100,%00001110
  db %00111000,%00011100,%00001110
  db %00111000,%00011100,%00001110
  db %00111000,%00011100,%00001110
  db %00111000,%00011100,%00001110
  db %00111000,%00011100,%00001110
  db %00111100,%00111100,%00011110
  db %00011111,%11111000,%01111100
  db %00001111,%11110000,%01111000
  db %00000111,%11100000,%01110000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_S_end
; T
bigfont_T
  db %00000000,%00000000,%00001110
  db %00000000,%00000000,%00001110
  db %00000000,%00000000,%00001110
  db %00000000,%00000000,%00001110
  db %00111111,%11111111,%11111110
  db %00111111,%11111111,%11111110
  db %00111111,%11111111,%11111110
  db %00000000,%00000000,%00001110
  db %00000000,%00000000,%00001110
  db %00000000,%00000000,%00001110
  db %00000000,%00000000,%00001110
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_T_end
; U
bigfont_U
  db %00000111,%11111111,%11111110
  db %00001111,%11111111,%11111110
  db %00011111,%11111111,%11111110
  db %00111100,%00000000,%00000000
  db %00111000,%00000000,%00000000
  db %00111000,%00000000,%00000000
  db %00111000,%00000000,%00000000
  db %00111000,%00000000,%00000000
  db %00111100,%00000000,%00000000
  db %00011111,%11111111,%11111110
  db %00001111,%11111111,%11111110
  db %00000111,%11111111,%11111110
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_U_end
; V
bigfont_V
  db %00000000,%01111111,%11111110
  db %00000000,%11111111,%11111110
  db %00000111,%11111000,%00000000
  db %00001111,%11100000,%00000000
  db %00011111,%11000000,%00000000
  db %00111100,%00000000,%00000000
  db %00111000,%00000000,%00000000
  db %00111100,%00000000,%00000000
  db %00011111,%11000000,%00000000
  db %00001111,%11100000,%00000000
  db %00000111,%11111000,%00000000
  db %00000000,%11111111,%11111110
  db %00000000,%01111111,%11111110
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_V_end
; W
bigfont_W
  db %00111111,%11111111,%11111110
  db %00111111,%11111111,%11111110
  db %00011111,%00000000,%00000000
  db %00001111,%10000000,%00000000
  db %00000111,%11100000,%00000000
  db %00000001,%11111100,%00000000
  db %00000000,%11111110,%00000000
  db %00000001,%11111100,%00000000
  db %00000111,%11100000,%00000000
  db %00001111,%10000000,%00000000
  db %00011111,%00000000,%00000000
  db %00111111,%11111111,%11111110
  db %00111111,%11111111,%11111110
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_W_end
; X
bigfont_X
  db %00111111,%00000000,%01111110
  db %00111111,%10000000,%11111110
  db %00111111,%11000001,%11111110
  db %00000011,%11100011,%11100000
  db %00000001,%11100011,%11000000
  db %00000000,%11110111,%10000000
  db %00000000,%00111110,%00000000
  db %00000000,%00011100,%00000000
  db %00000000,%00111110,%00000000
  db %00000000,%11110111,%10000000
  db %00000001,%11100011,%11000000
  db %00000011,%11100011,%11100000
  db %00111111,%11000001,%11111110
  db %00111111,%10000000,%11111110
  db %00111111,%00000000,%01111110
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_X_end
; Y
bigfont_Y
  db %00000000,%00001111,%11111110
  db %00000000,%00011111,%11111110
  db %00000000,%00111110,%00000000
  db %00000000,%01111100,%00000000
  db %00111111,%11111100,%00000000
  db %00111111,%11111100,%00000000
  db %00111111,%11111100,%00000000
  db %00000000,%01111100,%00000000
  db %00000000,%00111110,%00000000
  db %00000000,%00011111,%11111110
  db %00000000,%00001111,%11111110
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_Y_end
; Z
bigfont_Z
  db %00111111,%10000000,%00001110
  db %00111111,%11000000,%00001110
  db %00111011,%11100000,%00001110
  db %00111001,%11110000,%00001110
  db %00111000,%11111000,%00001110
  db %00111000,%01111100,%00001110
  db %00111000,%00111110,%00001110
  db %00111000,%00011111,%00001110
  db %00111000,%00001111,%10001110
  db %00111000,%00000111,%11001110
  db %00111000,%00000011,%11101110
  db %00111000,%00000001,%11111110
  db %00111000,%00000000,%11111110
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_Z_end
; a
bigfont_a_s
  db %00000111,%00000000,%00000000
  db %00001111,%10000000,%00000000
  db %00011111,%11000000,%00000000
  db %00111000,%11100011,%10000000
  db %00111000,%11100011,%10000000
  db %00111000,%11100011,%10000000
  db %00111000,%11100011,%10000000
  db %00111000,%11100011,%10000000
  db %00111000,%11100011,%10000000
  db %00111000,%11100011,%10000000
  db %00111111,%11111111,%00000000
  db %00111111,%11111110,%00000000
  db %00111111,%11111100,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_a_end_s
; b
bigfont_b_s
  db %00111111,%11111111,%11111110
  db %00111111,%11111111,%11111110
  db %00000111,%10111100,%00000000
  db %00001111,%00011110,%00000000
  db %00011110,%00001111,%00000000
  db %00111000,%00000011,%10000000
  db %00111000,%00000011,%10000000
  db %00111000,%00000011,%10000000
  db %00111100,%00000111,%10000000
  db %00011111,%11111111,%00000000
  db %00001111,%11111110,%00000000
  db %00000111,%11111100,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_b_end_s
; c
bigfont_c_s
  db %00001111,%11111110,%00000000
  db %00011111,%11111111,%00000000
  db %00111100,%00000111,%10000000
  db %00111000,%00000011,%10000000
  db %00111000,%00000011,%10000000
  db %00111000,%00000011,%10000000
  db %00111000,%00000011,%10000000
  db %00111000,%00000011,%10000000
  db %00111100,%00000111,%10000000
  db %00011110,%00001111,%00000000
  db %00001110,%00001110,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_c_end_s
; d
bigfont_d_s
  db %00001111,%11111110,%00000000
  db %00011111,%11111111,%00000000
  db %00111100,%00000111,%10000000
  db %00111000,%00000011,%10000000
  db %00111000,%00000011,%10000000
  db %00111000,%00000011,%10000000
  db %00111100,%00000111,%10000000
  db %00011110,%00001111,%00000000
  db %00001111,%00011110,%00000000
  db %00111111,%11111111,%11111110
  db %00111111,%11111111,%11111110
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_d_end_s
; e
bigfont_e_s
  db %00001111,%11111110,%00000000
  db %00011111,%11111111,%00000000
  db %00111100,%11100011,%10000000
  db %00111000,%11100011,%10000000
  db %00111000,%11100011,%10000000
  db %00111000,%11100011,%10000000
  db %00111000,%11100011,%10000000
  db %00111000,%11100011,%10000000
  db %00111000,%11100011,%10000000
  db %00111000,%11100111,%10000000
  db %00000000,%11111111,%00000000
  db %00000000,%11111110,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_e_end_s
; f
bigfont_f_s
  db %00000000,%00011100,%00000000
  db %00000000,%00011100,%00000000
  db %00000000,%00011100,%00000000
  db %00111111,%11111111,%11110000
  db %00111111,%11111111,%11111000
  db %00111111,%11111111,%11111100
  db %00000000,%00011100,%00011110
  db %00000000,%00011100,%00001110
  db %00000000,%00011100,%00011110
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_f_end_s
; g
bigfont_g_s
  db %00000001,%11111110,%00000000
  db %00000011,%11111111,%00000000
  db %11000111,%10000111,%10000000
  db %11000111,%00000011,%10000000
  db %11000111,%00000011,%10000000
  db %11000111,%00000011,%10000000
  db %11000111,%00000011,%10000000
  db %11000011,%11111111,%00000000
  db %11000001,%11111110,%00000000
  db %11100000,%11111100,%00000000
  db %11111111,%11111111,%10000000
  db %01111111,%11111111,%10000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_g_end_s
; h
bigfont_h_s
  db %00111111,%11111111,%11111110
  db %00111111,%11111111,%11111110
  db %00111111,%11111111,%11111110
  db %00000000,%00000011,%10000000
  db %00000000,%00000011,%10000000
  db %00000000,%00000011,%10000000
  db %00000000,%00000011,%10000000
  db %00000000,%00000111,%10000000
  db %00111111,%11111111,%00000000
  db %00111111,%11111110,%00000000
  db %00111111,%11111100,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_h_end_s
; i
bigfont_i_s
  db %00111000,%00000011,%10000000
  db %00111000,%00000011,%10000000
  db %00111111,%11111111,%10001110
  db %00111111,%11111111,%10001110
  db %00111111,%11111111,%10001110
  db %00111000,%00000000,%00000000
  db %00111000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_i_end_s
; j
bigfont_j_s
  db %01111000,%00000000,%00000000
  db %11111000,%00000000,%00000000
  db %11100000,%00000000,%00000000
  db %11000000,%00000000,%00000000
  db %11000000,%00000000,%00000000
  db %11100000,%00000011,%10000000
  db %11111111,%11111111,%10001110
  db %01111111,%11111111,%10001110
  db %00111111,%11111111,%10001110
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_j_end_s
; k
bigfont_k_s
  db %00111111,%11111111,%11111110
  db %00111111,%11111111,%11111110
  db %00111111,%11111111,%11111110
  db %00000001,%11110000,%00000000
  db %00000011,%11111000,%00000000
  db %00000111,%10111100,%00000000
  db %00001111,%00011110,%00000000
  db %00011111,%00011111,%00000000
  db %00111110,%00001111,%10000000
  db %00111100,%00000111,%10000000
  db %00111000,%00000011,%10000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_k_end_s
; l
bigfont_l_s
  db %00111000,%00000000,%00001110
  db %00111000,%00000000,%00001110
  db %00111111,%11111111,%11111110
  db %00111111,%11111111,%11111110
  db %00111111,%11111111,%11111110
  db %00111000,%00000000,%00000000
  db %00111000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_l_end_s
; m
bigfont_m_s
  db %00111111,%11111111,%10000000
  db %00111111,%11111111,%10000000
  db %00111111,%11111111,%10000000
  db %00000000,%00000111,%10000000
  db %00000000,%00000011,%10000000
  db %00000000,%00000111,%10000000
  db %00111111,%11111111,%00000000
  db %00111111,%11111110,%00000000
  db %00111111,%11111111,%00000000
  db %00000000,%00000111,%10000000
  db %00000000,%00000011,%10000000
  db %00000000,%00000111,%10000000
  db %00111111,%11111111,%00000000
  db %00111111,%11111110,%00000000
  db %00111111,%11111100,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_m_end_s
; n
bigfont_n_s
  db %00111111,%11111111,%10000000
  db %00111111,%11111111,%10000000
  db %00111111,%11111111,%10000000
  db %00000000,%00111110,%00000000
  db %00000000,%00001111,%00000000
  db %00000000,%00000111,%10000000
  db %00000000,%00000011,%10000000
  db %00000000,%00000111,%10000000
  db %00000000,%00001111,%10000000
  db %00111111,%11111111,%00000000
  db %00111111,%11111110,%00000000
  db %00111111,%11111100,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_n_end_s
; o
bigfont_o_s
  db %00000111,%11111100,%00000000
  db %00001111,%11111110,%00000000
  db %00011111,%11111111,%00000000
  db %00111100,%00000111,%10000000
  db %00111000,%00000011,%10000000
  db %00111000,%00000011,%10000000
  db %00111000,%00000011,%10000000
  db %00111000,%00000011,%10000000
  db %00111000,%00000011,%10000000
  db %00111100,%00000111,%10000000
  db %00011111,%11111111,%00000000
  db %00001111,%11111110,%00000000
  db %00000111,%11111100,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_o_end_s
; p
bigfont_p_s
  db %11111111,%11111111,%10000000
  db %11111111,%11111111,%10000000
  db %11111111,%11111111,%10000000
  db %00000011,%11111111,%00000000
  db %00000111,%10000111,%10000000
  db %00000111,%00000011,%10000000
  db %00000111,%00000011,%10000000
  db %00000111,%00000011,%10000000
  db %00000111,%10000111,%10000000
  db %00000011,%11111111,%00000000
  db %00000001,%11111110,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_p_end_s
; q
bigfont_q_s
  db %00000111,%00000000,%00000000
  db %00000111,%00000000,%00000000
  db %00000111,%00000000,%00000000
  db %00111000,%11100011,%10000000
  db %00111000,%11100011,%10000000
  db %00111000,%11100011,%10000000
  db %00111000,%11100011,%10000000
  db %00111000,%11100011,%10000000
  db %00111000,%11100011,%10000000
  db %00111000,%11100011,%10000000
  db %00111000,%11100011,%10000000
  db %00111000,%11100011,%10000000
  db %00111111,%11111100,%00000000
  db %00111111,%11111100,%00000000
  db %00111111,%11111100,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_q_end_s
; r
bigfont_r_s
  db %00111111,%11111111,%10000000
  db %00111111,%11111111,%10000000
  db %00111111,%11111111,%10000000
  db %00000000,%00111110,%00000000
  db %00000000,%00011111,%00000000
  db %00000000,%00000111,%10000000
  db %00000000,%00000011,%10000000
  db %00000000,%00000011,%10000000
  db %00000000,%00000111,%10000000
  db %00000000,%00001111,%10000000
  db %00000000,%00011111,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_r_end_s
; s
bigfont_s_s
  db %00111000,%01111100,%00000000
  db %00111000,%11111110,%00000000
  db %00111000,%11111111,%00000000
  db %00111000,%11100011,%10000000
  db %00111000,%11100011,%10000000
  db %00111000,%11100011,%10000000
  db %00111000,%11100011,%10000000
  db %00111000,%11100011,%10000000
  db %00111100,%11100011,%10000000
  db %00011111,%11000011,%10000000
  db %00001111,%10000011,%10000000
  db %00000111,%00000011,%10000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_s_end_s
; t
bigfont_t_s
  db %00000000,%00000011,%10000000
  db %00000000,%00000011,%10000000
  db %00000111,%11111111,%11111110
  db %00001111,%11111111,%11111110
  db %00011111,%11111111,%11111110
  db %00111000,%00000011,%10000000
  db %00111000,%00000011,%10000000
  db %00111000,%00000011,%10000000
  db %00111000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_t_end_s
; u
bigfont_u_s
  db %00000111,%11111111,%10000000
  db %00001111,%11111111,%10000000
  db %00011111,%11111111,%10000000
  db %00111100,%00000000,%00000000
  db %00111000,%00000000,%00000000
  db %00111000,%00000000,%00000000
  db %00111100,%00000000,%00000000
  db %00011111,%11111111,%10000000
  db %00000111,%11111111,%10000000
  db %00011111,%11111111,%10000000
  db %00111100,%00000000,%00000000
  db %00111000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_u_end_s
; v
bigfont_v_s
  db %00000001,%11111111,%10000000
  db %00000011,%11111111,%10000000
  db %00000111,%11100000,%00000000
  db %00011111,%00000000,%00000000
  db %00111100,%00000000,%00000000
  db %00111000,%00000000,%00000000
  db %00111100,%00000000,%00000000
  db %00011111,%00000000,%00000000
  db %00000111,%11100000,%00000000
  db %00000011,%11111111,%10000000
  db %00000001,%11111111,%10000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_v_end_s
; w
bigfont_w_s
  db %00000111,%11111111,%10000000
  db %00001111,%11111111,%10000000
  db %00011111,%11111111,%10000000
  db %00111100,%00000000,%00000000
  db %00111000,%00000000,%00000000
  db %00111100,%00000000,%00000000
  db %00011111,%11111100,%00000000
  db %00000111,%11111100,%00000000
  db %00011111,%11111100,%00000000
  db %00111100,%00000000,%00000000
  db %00111000,%00000000,%00000000
  db %00111100,%00000000,%00000000
  db %00011111,%11111111,%10000000
  db %00001111,%11111111,%10000000
  db %00000111,%11111111,%10000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_w_end_s
; x
bigfont_x_s
  db %00111000,%00000011,%10000000
  db %00111100,%00000111,%10000000
  db %00001111,%00011110,%00000000
  db %00000111,%10111100,%00000000
  db %00000001,%11110000,%00000000
  db %00000000,%11100000,%00000000
  db %00000001,%11110000,%00000000
  db %00000111,%10111100,%00000000
  db %00001111,%00011110,%00000000
  db %00111100,%00000111,%10000000
  db %00111000,%00000011,%10000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_x_end_s
; y
bigfont_y_s
  db %00000000,%11111111,%10000000
  db %00000001,%11111111,%10000000
  db %11000011,%10000000,%00000000
  db %11000111,%00000000,%00000000
  db %11000111,%00000000,%00000000
  db %11000111,%00000000,%00000000
  db %11000011,%10000000,%00000000
  db %11000001,%11100000,%00000000
  db %11100000,%11100000,%00000000
  db %11111111,%11111111,%10000000
  db %01111111,%11111111,%10000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_y_end_s
; z
bigfont_z_s
  db %00111100,%00000011,%10000000
  db %00111110,%00000011,%10000000
  db %00111111,%00000011,%10000000
  db %00111111,%10000011,%10000000
  db %00111011,%11000011,%10000000
  db %00111001,%11100011,%10000000
  db %00111000,%11110011,%10000000
  db %00111000,%01111011,%10000000
  db %00111000,%00111111,%10000000
  db %00111000,%00011111,%10000000
  db %00111000,%00001111,%10000000
  db %00111000,%00000111,%10000000
  db %00000000,%00000000,%00000000
bigfont_space
  db %00000000,%00000000,%00000000
  db %00000000,%00000000,%00000000
bigfont_z_end_s
  ds 3*6	; overlap bigfont_space with final2 empty cols
 ; }}}


	ds ((($/256)+1)*256)-$
sintab:
	; {{{  perl -e for $i (0..255){ print " db ".int(-0.0+64*sin($i*8*atan2(1,1)/256))."\n";}
 db 0,1,3,4,6,7,9,10,12,14,15,17,18,20,21,23
 db 24,25,27,28,30,31,32,34,35,36,38,39,40,41,42,44
 db 45,46,47,48,49,50,51,52,53,54,54,55,56,57,57,58
 db 59,59,60,60,61,61,62,62,62,63,63,63,63,63,63,63
 db 64,63,63,63,63,63,63,63,62,62,62,61,61,60,60,59
 db 59,58,57,57,56,55,54,54,53,52,51,50,49,48,47,46
 db 45,44,42,41,40,39,38,36,35,34,32,31,30,28,27,25
 db 24,23,21,20,18,17,15,14,12,10,9,7,6,4,3,1
 db 0,-1,-3,-4,-6,-7,-9,-10,-12,-14,-15,-17,-18,-20,-21,-23
 db -24,-25,-27,-28,-30,-31,-32,-34,-35,-36,-38,-39,-40,-41,-42,-44
 db -45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-54,-55,-56,-57,-57,-58
 db -59,-59,-60,-60,-61,-61,-62,-62,-62,-63,-63,-63,-63,-63,-63,-63
 db -64,-63,-63,-63,-63,-63,-63,-63,-62,-62,-62,-61,-61,-60,-60,-59
 db -59,-58,-57,-57,-56,-55,-54,-54,-53,-52,-51,-50,-49,-48,-47,-46
 db -45,-44,-42,-41,-40,-39,-38,-36,-35,-34,-32,-31,-30,-28,-27,-25
 db -24,-23,-21,-20,-18,-17,-15,-14,-12,-10,-9,-7,-6,-4,-3,-1
	; }}}
mulu255mac	; this tabel must start at a #XX00 boundry {{{
	;van 0-255 low
mul255small	db	0 , 0 , 1 , 2 , 4 , 6 , 9 , 12 , 16 , 20
	db	25 , 30 , 36 , 42 , 49 , 56 , 64 , 72 , 81 , 90
	db	100 , 110 , 121 , 132 , 144 , 156 , 169 , 182 , 196 , 210
	db	225 , 240 , 0 , 16 , 33 , 50 , 68 , 86 , 105 , 124
	db	144 , 164 , 185 , 206 , 228 , 250 , 17 , 40 , 64 , 88
	db	113 , 138 , 164 , 190 , 217 , 244 , 16 , 44 , 73 , 102
	db	132 , 162 , 193 , 224 , 0 , 32 , 65 , 98 , 132 , 166
	db	201 , 236 , 16 , 52 , 89 , 126 , 164 , 202 , 241 , 24
	db	64 , 104 , 145 , 186 , 228 , 14 , 57 , 100 , 144 , 188
	db	233 , 22 , 68 , 114 , 161 , 208 , 0 , 48 , 97 , 146
	db	196 , 246 , 41 , 92 , 144 , 196 , 249 , 46 , 100 , 154
	db	209 , 8 , 64 , 120 , 177 , 234 , 36 , 94 , 153 , 212
	db	16 , 76 , 137 , 198 , 4 , 66 , 129 , 192 , 0 , 64
	db	129 , 194 , 4 , 70 , 137 , 204 , 16 , 84 , 153 , 222
	db	36 , 106 , 177 , 248 , 64 , 136 , 209 , 26 , 100 , 174
	db	249 , 68 , 144 , 220 , 41 , 118 , 196 , 18 , 97 , 176
	db	0 , 80 , 161 , 242 , 68 , 150 , 233 , 60 , 144 , 228
	db	57 , 142 , 228 , 58 , 145 , 232 , 64 , 152 , 241 , 74
	db	164 , 254 , 89 , 180 , 16 , 108 , 201 , 38 , 132 , 226
	db	65 , 160 , 0 , 96 , 193 , 34 , 132 , 230 , 73 , 172
	db	16 , 116 , 217 , 62 , 164 , 10 , 113 , 216 , 64 , 168
	db	17 , 122 , 228 , 78 , 185 , 36 , 144 , 252 , 105 , 214
	db	68 , 178 , 33 , 144 , 0 , 112 , 225 , 82 , 196 , 54
	db	169 , 28 , 144 , 4 , 121 , 238 , 100 , 218 , 81 , 200
	db	64 , 184 , 49 , 170 , 36 , 158 , 25 , 148 , 16 , 140
	db	9 , 134 , 4 , 130 , 1 , 128
;van 0-255 high
	db	0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0
	db	0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0
	db	0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0
	db	0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1
	db	1 , 1 , 1 , 1 , 1 , 1 , 2 , 2 , 2 , 2
	db	2 , 2 , 2 , 2 , 2 , 2 , 3 , 3 , 3 , 3
	db	3 , 3 , 3 , 3 , 4 , 4 , 4 , 4 , 4 , 4
	db	4 , 4 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 6
	db	6 , 6 , 6 , 6 , 6 , 7 , 7 , 7 , 7 , 7
	db	7 , 8 , 8 , 8 , 8 , 8 , 9 , 9 , 9 , 9
	db	9 , 9 , 10 , 10 , 10 , 10 , 10 , 11 , 11 , 11
	db	11 , 12 , 12 , 12 , 12 , 12 , 13 , 13 , 13 , 13
	db	14 , 14 , 14 , 14 , 15 , 15 , 15 , 15 , 16 , 16
	db	16 , 16 , 17 , 17 , 17 , 17 , 18 , 18 , 18 , 18
	db	19 , 19 , 19 , 19 , 20 , 20 , 20 , 21 , 21 , 21
	db	21 , 22 , 22 , 22 , 23 , 23 , 23 , 24 , 24 , 24
	db	25 , 25 , 25 , 25 , 26 , 26 , 26 , 27 , 27 , 27
	db	28 , 28 , 28 , 29 , 29 , 29 , 30 , 30 , 30 , 31
	db	31 , 31 , 32 , 32 , 33 , 33 , 33 , 34 , 34 , 34
	db	35 , 35 , 36 , 36 , 36 , 37 , 37 , 37 , 38 , 38
	db	39 , 39 , 39 , 40 , 40 , 41 , 41 , 41 , 42 , 42
	db	43 , 43 , 43 , 44 , 44 , 45 , 45 , 45 , 46 , 46
	db	47 , 47 , 48 , 48 , 49 , 49 , 49 , 50 , 50 , 51
	db	51 , 52 , 52 , 53 , 53 , 53 , 54 , 54 , 55 , 55
	db	56 , 56 , 57 , 57 , 58 , 58 , 59 , 59 , 60 , 60
	db	61 , 61 , 62 , 62 , 63 , 63
;van 256-511 low
mul255big	db	0 , 128 , 1 , 130 , 4 , 134 , 9 , 140 , 16 , 148
	db	25 , 158 , 36 , 170 , 49 , 184 , 64 , 200 , 81 , 218
	db	100 , 238 , 121 , 4 , 144 , 28 , 169 , 54 , 196 , 82
	db	225 , 112 , 0 , 144 , 33 , 178 , 68 , 214 , 105 , 252
	db	144 , 36 , 185 , 78 , 228 , 122 , 17 , 168 , 64 , 216
	db	113 , 10 , 164 , 62 , 217 , 116 , 16 , 172 , 73 , 230
	db	132 , 34 , 193 , 96 , 0 , 160 , 65 , 226 , 132 , 38
	db	201 , 108 , 16 , 180 , 89 , 254 , 164 , 74 , 241 , 152
	db	64 , 232 , 145 , 58 , 228 , 142 , 57 , 228 , 144 , 60
	db	233 , 150 , 68 , 242 , 161 , 80 , 0 , 176 , 97 , 18
	db	196 , 118 , 41 , 220 , 144 , 68 , 249 , 174 , 100 , 26
	db	209 , 136 , 64 , 248 , 177 , 106 , 36 , 222 , 153 , 84
	db	16 , 204 , 137 , 70 , 4 , 194 , 129 , 64 , 0 , 192
	db	129 , 66 , 4 , 198 , 137 , 76 , 16 , 212 , 153 , 94
	db	36 , 234 , 177 , 120 , 64 , 8 , 209 , 154 , 100 , 46
	db	249 , 196 , 144 , 92 , 41 , 246 , 196 , 146 , 97 , 48
	db	0 , 208 , 161 , 114 , 68 , 22 , 233 , 188 , 144 , 100
	db	57 , 14 , 228 , 186 , 145 , 104 , 64 , 24 , 241 , 202
	db	164 , 126 , 89 , 52 , 16 , 236 , 201 , 166 , 132 , 98
	db	65 , 32 , 0 , 224 , 193 , 162 , 132 , 102 , 73 , 44
	db	16 , 244 , 217 , 190 , 164 , 138 , 113 , 88 , 64 , 40
	db	17 , 250 , 228 , 206 , 185 , 164 , 144 , 124 , 105 , 86
	db	68 , 50 , 33 , 16 , 0 , 240 , 225 , 210 , 196 , 182
	db	169 , 156 , 144 , 132 , 121 , 110 , 100 , 90 , 81 , 72
	db	64 , 56 , 49 , 42 , 36 , 30 , 25 , 20 , 16 , 12
	db	9 , 6 , 4 , 2 , 1 , 0
;van 256-511 high
mul255bigh	db	64 , 64 , 65 , 65 , 66 , 66 , 67 , 67 , 68 , 68
	db	69 , 69 , 70 , 70 , 71 , 71 , 72 , 72 , 73 , 73
	db	74 , 74 , 75 , 76 , 76 , 77 , 77 , 78 , 78 , 79
	db	79 , 80 , 81 , 81 , 82 , 82 , 83 , 83 , 84 , 84
	db	85 , 86 , 86 , 87 , 87 , 88 , 89 , 89 , 90 , 90
	db	91 , 92 , 92 , 93 , 93 , 94 , 95 , 95 , 96 , 96
	db	97 , 98 , 98 , 99 , 100 , 100 , 101 , 101 , 102 , 103
	db	103 , 104 , 105 , 105 , 106 , 106 , 107 , 108 , 108 , 109
	db	110 , 110 , 111 , 112 , 112 , 113 , 114 , 114 , 115 , 116
	db	116 , 117 , 118 , 118 , 119 , 120 , 121 , 121 , 122 , 123
	db	123 , 124 , 125 , 125 , 126 , 127 , 127 , 128 , 129 , 130
	db	130 , 131 , 132 , 132 , 133 , 134 , 135 , 135 , 136 , 137
	db	138 , 138 , 139 , 140 , 141 , 141 , 142 , 143 , 144 , 144
	db	145 , 146 , 147 , 147 , 148 , 149 , 150 , 150 , 151 , 152
	db	153 , 153 , 154 , 155 , 156 , 157 , 157 , 158 , 159 , 160
	db	160 , 161 , 162 , 163 , 164 , 164 , 165 , 166 , 167 , 168
	db	169 , 169 , 170 , 171 , 172 , 173 , 173 , 174 , 175 , 176
	db	177 , 178 , 178 , 179 , 180 , 181 , 182 , 183 , 183 , 184
	db	185 , 186 , 187 , 188 , 189 , 189 , 190 , 191 , 192 , 193
	db	194 , 195 , 196 , 196 , 197 , 198 , 199 , 200 , 201 , 202
	db	203 , 203 , 204 , 205 , 206 , 207 , 208 , 209 , 210 , 211
	db	212 , 212 , 213 , 214 , 215 , 216 , 217 , 218 , 219 , 220
	db	221 , 222 , 223 , 224 , 225 , 225 , 226 , 227 , 228 , 229
	db	230 , 231 , 232 , 233 , 234 , 235 , 236 , 237 , 238 , 239
	db	240 , 241 , 242 , 243 , 244 , 245 , 246 , 247 , 248 , 249
	db	250 , 251 , 252 , 253 , 254 , 255
	; }}}
bitmapdata:
	;{{{
 db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00
 db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00
 db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00
 db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00
 db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00
 db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00
 db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00
 db #00,#0f,#19,#14,#0e,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#02,#03,#03,#03,#03,#03,#03,#03,#02,#02,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#09,#1e,#26,#1e,#12,#03
 db #1a,#28,#29,#21,#1a,#17,#00,#05,#14,#0e,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#02,#06,#0a,#11,#17,#1f,#25,#2a,#2c,#2c,#2b,#29,#25,#20,#1a,#10,#0a,#04,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#1a,#21,#11,#03,#24,#27,#25,#1b,#19,#12
 db #1e,#22,#1f,#16,#16,#14,#02,#1d,#20,#15,#01,#00,#00,#00,#00,#00,#00,#00,#00,#01,#04,#0c,#12,#19,#21,#25,#2a,#2e,#34,#35,#3a,#3a,#3a,#38,#33,#33,#30,#2e,#2b,#29,#24,#18,#12,#0b,#04,#00,#00,#00,#00,#00,#00,#00,#00,#01,#1f,#15,#12,#05,#1f,#20,#1a,#11,#14,#12
 db #18,#1b,#1a,#12,#0f,#10,#02,#07,#17,#0e,#00,#00,#00,#00,#00,#00,#00,#00,#08,#10,#18,#1e,#21,#23,#27,#2a,#2f,#35,#38,#3b,#3b,#3d,#3d,#3c,#3b,#38,#34,#30,#2e,#2c,#2b,#28,#21,#1d,#15,#0c,#07,#01,#00,#00,#00,#00,#00,#00,#06,#09,#01,#00,#1a,#1a,#1b,#13,#0d,#0b
 db #02,#10,#19,#17,#0c,#03,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#04,#0d,#16,#1b,#20,#22,#25,#28,#2a,#2e,#31,#38,#3b,#3d,#3f,#3f,#3f,#3e,#3c,#3b,#36,#33,#30,#2e,#2c,#29,#26,#21,#1f,#1a,#0f,#09,#03,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#0c,#0e,#0b,#06,#00
 db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#05,#0e,#17,#1e,#20,#23,#25,#27,#29,#2c,#2f,#34,#37,#3b,#3f,#3f,#3f,#3f,#3f,#3e,#3b,#39,#34,#31,#2f,#2d,#2b,#28,#23,#20,#1e,#18,#11,#0a,#05,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00
 db #00,#00,#05,#19,#18,#08,#00,#00,#00,#00,#00,#00,#00,#00,#03,#10,#17,#1c,#20,#22,#25,#26,#28,#2a,#2d,#30,#34,#38,#3a,#3c,#3f,#3f,#3f,#3f,#3e,#3b,#39,#35,#31,#2f,#2c,#2a,#26,#25,#22,#1f,#1d,#18,#12,#0b,#04,#00,#00,#00,#00,#00,#00,#00,#02,#20,#26,#19,#01,#00
 db #00,#00,#1e,#25,#1b,#15,#00,#00,#00,#00,#00,#00,#00,#01,#0b,#14,#1a,#1e,#21,#22,#25,#26,#29,#2c,#2e,#30,#33,#37,#3a,#3b,#3c,#3e,#3e,#3e,#3c,#39,#38,#34,#31,#30,#2d,#29,#28,#25,#23,#20,#1e,#1b,#17,#10,#09,#00,#00,#00,#00,#00,#00,#00,#09,#23,#1d,#12,#03,#00
 db #00,#00,#0f,#18,#10,#0d,#00,#00,#00,#00,#00,#00,#00,#07,#11,#18,#1e,#1f,#21,#24,#25,#26,#28,#2b,#2d,#30,#32,#34,#35,#38,#39,#3a,#3a,#3b,#38,#37,#34,#33,#31,#2e,#2c,#29,#28,#25,#23,#21,#1f,#1d,#19,#14,#0c,#06,#00,#00,#00,#00,#00,#00,#00,#16,#12,#0c,#01,#00
 db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#0b,#15,#19,#1d,#1f,#21,#25,#25,#26,#28,#2c,#2d,#2f,#31,#33,#33,#34,#36,#37,#37,#36,#34,#33,#33,#32,#2f,#2e,#2b,#28,#26,#25,#23,#20,#1e,#1e,#1a,#17,#11,#09,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00
 db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#04,#0e,#15,#19,#1d,#1f,#21,#25,#25,#26,#28,#29,#2c,#2d,#2f,#30,#31,#31,#32,#33,#33,#33,#33,#33,#31,#2f,#2e,#2c,#2a,#27,#25,#25,#23,#21,#1f,#1d,#1b,#18,#14,#0d,#05,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00
 db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#04,#10,#16,#19,#1e,#1f,#21,#23,#25,#26,#27,#29,#2a,#2c,#2d,#2e,#2f,#30,#2e,#2b,#2c,#2c,#2e,#30,#2f,#2f,#2d,#2b,#28,#28,#26,#25,#23,#21,#1f,#1d,#1b,#18,#15,#10,#09,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00
 db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#04,#10,#16,#19,#1d,#1f,#21,#23,#25,#25,#27,#29,#2a,#29,#2b,#2c,#29,#29,#2c,#2c,#2a,#2d,#2b,#29,#2c,#2d,#2b,#29,#27,#26,#24,#24,#23,#21,#1f,#1d,#1c,#18,#16,#11,#0b,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00
 db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#04,#10,#15,#19,#1d,#1f,#21,#22,#24,#24,#25,#26,#27,#29,#28,#25,#2a,#2b,#2c,#27,#27,#2c,#2c,#2c,#27,#27,#29,#28,#27,#25,#25,#23,#23,#21,#1f,#1d,#1a,#19,#15,#12,#0b,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00
 db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#04,#10,#15,#18,#1d,#1f,#21,#22,#23,#24,#24,#26,#26,#28,#23,#28,#28,#29,#28,#28,#27,#26,#29,#29,#28,#25,#26,#27,#26,#25,#24,#23,#22,#20,#1e,#1c,#1b,#18,#16,#12,#0b,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00
 db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#04,#0e,#13,#18,#1b,#1e,#1f,#20,#21,#23,#24,#25,#25,#24,#21,#22,#23,#23,#22,#23,#23,#22,#23,#24,#23,#23,#24,#26,#25,#24,#23,#22,#21,#1f,#1e,#1c,#19,#17,#13,#11,#09,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00
 db #00,#00,#00,#00,#00,#00,#40,#80,#c0,#c3,#c0,#40,#04,#0d,#11,#15,#19,#1e,#1f,#20,#61,#e2,#e2,#e4,#a4,#23,#25,#22,#23,#25,#23,#26,#a8,#a5,#e3,#e4,#e3,#e6,#e2,#e5,#e3,#e3,#e2,#e1,#e0,#df,#dd,#db,#58,#16,#13,#0d,#07,#00,#03,#40,#c0,#c0,#c0,#c0,#80,#00,#00,#00
 db #00,#00,#00,#00,#00,#00,#40,#c0,#c0,#d2,#ca,#c0,#03,#0c,#0f,#12,#15,#1b,#1e,#1f,#e1,#e1,#e1,#e2,#e3,#61,#23,#24,#24,#20,#61,#e5,#e5,#e2,#e1,#e4,#e5,#e4,#e1,#e3,#e3,#e2,#e1,#e0,#df,#de,#dd,#d9,#d6,#13,#0f,#0b,#02,#02,#1c,#c3,#c0,#c0,#c0,#c0,#00,#00,#00,#00
 db #00,#00,#00,#00,#00,#00,#80,#c0,#c1,#df,#e4,#c3,#43,#0a,#0e,#11,#12,#17,#1c,#5e,#df,#e0,#e1,#e1,#e2,#a1,#20,#23,#22,#62,#e2,#e0,#e1,#e2,#e2,#e2,#e2,#e3,#e0,#e2,#e3,#e2,#e0,#df,#de,#dd,#d9,#d7,#d3,#91,#0c,#07,#00,#0e,#ac,#ca,#c0,#c0,#c0,#40,#00,#00,#00,#00
 db #00,#00,#00,#00,#00,#00,#80,#c0,#c5,#de,#ef,#d6,#81,#08,#0c,#0f,#17,#12,#18,#9d,#de,#df,#df,#e0,#e1,#a1,#1e,#21,#1e,#a1,#de,#e0,#e0,#9f,#61,#1e,#22,#1f,#21,#22,#21,#20,#1f,#1e,#1d,#9b,#d8,#d1,#d3,#d1,#4a,#02,#05,#69,#ed,#cd,#c1,#c0,#80,#00,#00,#00,#00,#00
 db #00,#00,#00,#00,#00,#00,#c0,#c0,#c8,#d4,#e8,#e8,#ca,#46,#09,#0c,#1d,#1d,#53,#d9,#dc,#dc,#df,#de,#df,#df,#1f,#1d,#1c,#dd,#e1,#e1,#e1,#20,#1f,#1d,#1e,#1f,#20,#20,#1f,#1f,#1f,#1d,#1b,#17,#d2,#d7,#d7,#cd,#c7,#04,#18,#ee,#dc,#d0,#c1,#c0,#00,#00,#00,#00,#00,#00
 db #00,#00,#00,#00,#00,#00,#c0,#c0,#c8,#d2,#86,#ea,#de,#8d,#08,#0e,#20,#26,#9e,#d3,#d8,#9c,#dd,#dd,#de,#de,#1e,#1e,#1c,#dc,#de,#df,#df,#1f,#1d,#1b,#1f,#1f,#1f,#1f,#1e,#1f,#1c,#1a,#17,#11,#59,#e2,#d9,#ca,#cc,#8e,#ac,#da,#cd,#cc,#c1,#40,#00,#00,#00,#00,#00,#00
 db #00,#00,#00,#00,#00,#00,#c0,#c0,#c2,#ca,#0f,#cd,#ea,#ec,#58,#17,#28,#6e,#ee,#ea,#d1,#17,#da,#dc,#dc,#dd,#1e,#1e,#1d,#de,#dd,#dc,#db,#9c,#5e,#1e,#1e,#1e,#1e,#1d,#1d,#1c,#1a,#15,#14,#21,#30,#a8,#db,#cd,#e4,#ed,#e2,#c7,#d3,#c8,#80,#00,#00,#00,#00,#00,#00,#00
 db #00,#00,#00,#00,#00,#00,#c0,#c0,#c0,#c2,#0e,#8c,#ca,#d9,#8c,#16,#24,#ad,#f3,#f4,#aa,#13,#d3,#d7,#da,#db,#1a,#1a,#1c,#9d,#dc,#dd,#dd,#dd,#dd,#dd,#9d,#9c,#5c,#1b,#19,#16,#11,#20,#30,#34,#2f,#24,#98,#cd,#d6,#d2,#c8,#d2,#c7,#80,#00,#00,#00,#00,#00,#00,#00,#00
 db #00,#00,#00,#00,#00,#00,#c0,#c0,#c0,#c0,#02,#5f,#cc,#c9,#c6,#0d,#1b,#dd,#e4,#ed,#76,#2a,#e8,#e1,#d6,#d5,#1c,#21,#1f,#1a,#d9,#d8,#d8,#d8,#d9,#da,#db,#db,#d6,#d4,#9b,#25,#2f,#36,#30,#24,#1c,#17,#0f,#c9,#c6,#cc,#d3,#ca,#c0,#00,#00,#00,#00,#00,#00,#00,#00,#00
 db #00,#00,#00,#00,#00,#00,#c0,#c0,#c0,#c0,#00,#17,#99,#d7,#c5,#87,#8b,#ce,#d1,#96,#27,#35,#ee,#f6,#f4,#ee,#25,#1f,#27,#2d,#21,#99,#d9,#db,#e1,#e6,#e7,#e3,#ea,#f2,#f2,#f3,#33,#2b,#18,#0f,#0e,#0c,#48,#c6,#c6,#df,#da,#c4,#c0,#40,#00,#00,#00,#00,#00,#00,#00,#00
 db #00,#00,#00,#00,#00,#00,#c0,#c0,#c0,#c0,#00,#05,#4d,#e4,#c9,#c6,#c6,#c6,#c6,#48,#0e,#1d,#ea,#ef,#f4,#f7,#2c,#31,#30,#2f,#25,#1d,#1e,#5d,#ae,#ef,#ed,#f0,#f1,#f3,#ef,#ea,#a3,#13,#0c,#07,#06,#06,#c6,#c5,#db,#d9,#d3,#c0,#c0,#c0,#00,#00,#00,#00,#00,#00,#00,#00
 db #00,#00,#00,#00,#00,#00,#c0,#c0,#c0,#c0,#00,#04,#1a,#8b,#cc,#ca,#cf,#cd,#88,#05,#08,#11,#d6,#d8,#e1,#ea,#27,#1b,#2e,#2c,#1b,#1b,#1b,#20,#21,#29,#1b,#68,#ed,#e6,#dc,#d4,#d9,#0c,#06,#07,#09,#8f,#cc,#c6,#d7,#cd,#d5,#c0,#c0,#c0,#80,#00,#00,#00,#00,#00,#00,#00
 db #00,#00,#00,#00,#00,#00,#c0,#c0,#c0,#c0,#00,#0b,#28,#5b,#c6,#d0,#d8,#da,#4f,#09,#05,#0f,#e8,#f9,#ef,#d7,#06,#06,#09,#12,#0f,#14,#14,#11,#0f,#09,#06,#05,#0b,#df,#f8,#f4,#d9,#08,#06,#0c,#55,#db,#d5,#cc,#d2,#a3,#9c,#c0,#c0,#c0,#c0,#40,#00,#00,#00,#00,#00,#00
 db #00,#00,#00,#00,#00,#00,#c0,#c0,#c0,#c0,#00,#11,#25,#25,#c9,#d9,#e2,#e3,#1e,#11,#09,#05,#c7,#ff,#ff,#c6,#86,#0c,#18,#19,#26,#29,#29,#21,#18,#12,#10,#09,#05,#c8,#ff,#ff,#c6,#06,#0c,#17,#e1,#e3,#de,#d1,#ce,#2d,#1e,#c8,#c0,#c0,#c0,#c0,#00,#00,#00,#00,#00,#00
 db #00,#00,#00,#00,#00,#00,#c0,#c0,#c0,#c0,#01,#0b,#1c,#0c,#0a,#18,#26,#2a,#2c,#24,#18,#10,#ca,#c8,#c8,#c9,#d1,#9e,#22,#22,#2d,#2f,#2e,#29,#1f,#1c,#1f,#58,#8b,#c8,#c8,#c8,#8c,#12,#1d,#a8,#ed,#e9,#e0,#d0,#46,#18,#14,#47,#c0,#c0,#c0,#c0,#80,#00,#00,#00,#00,#00
 db #00,#00,#00,#00,#00,#00,#c0,#c0,#c0,#c0,#00,#00,#01,#03,#08,#10,#22,#2c,#2a,#30,#28,#27,#a0,#df,#e0,#e3,#e8,#e8,#e4,#e7,#ec,#f0,#f0,#eb,#e2,#df,#e3,#e6,#e6,#e2,#e0,#e1,#61,#2c,#69,#ef,#ed,#e8,#d8,#8b,#06,#01,#01,#00,#80,#c0,#c0,#c0,#c0,#40,#00,#00,#00,#00
 db #00,#00,#00,#00,#00,#00,#c0,#c0,#c0,#80,#00,#00,#00,#00,#07,#08,#11,#22,#29,#2c,#2e,#2e,#ad,#f3,#f0,#ef,#ee,#e9,#e4,#e7,#ee,#f1,#f0,#ec,#e5,#e0,#e5,#ea,#ed,#f0,#f2,#71,#30,#28,#ec,#ec,#e6,#df,#8b,#08,#04,#00,#00,#00,#00,#c0,#c0,#c0,#c0,#c0,#00,#00,#00,#00
 db #00,#00,#00,#00,#00,#00,#80,#c0,#c0,#40,#00,#00,#00,#00,#01,#06,#08,#0f,#1c,#24,#2b,#2d,#6e,#a8,#ec,#ef,#eb,#e4,#e1,#ea,#ef,#f0,#f0,#ed,#e5,#e0,#e5,#ea,#ae,#ae,#2b,#2f,#2b,#ab,#e8,#e1,#d7,#c9,#47,#04,#00,#00,#00,#00,#00,#40,#c0,#c0,#c0,#c0,#80,#00,#00,#00
 db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#03,#05,#07,#09,#0f,#1c,#21,#1e,#19,#24,#26,#1c,#21,#23,#28,#2f,#31,#31,#2e,#28,#1f,#21,#25,#21,#28,#18,#1c,#23,#22,#16,#0b,#07,#05,#03,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00
 db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#03,#05,#06,#07,#09,#0f,#1b,#22,#1e,#18,#1f,#25,#2e,#24,#2f,#33,#31,#2f,#24,#2c,#24,#1f,#20,#18,#28,#1e,#14,#0d,#08,#06,#04,#02,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00
 db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#03,#05,#06,#0b,#15,#1f,#1e,#0e,#23,#18,#26,#31,#2e,#30,#32,#33,#2f,#2e,#31,#27,#0f,#25,#18,#17,#24,#1e,#12,#0b,#06,#04,#02,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00
 db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#03,#06,#09,#10,#19,#1b,#0e,#19,#27,#18,#13,#22,#2d,#31,#32,#32,#32,#2d,#23,#13,#0f,#26,#1d,#0d,#1b,#1d,#18,#0d,#08,#06,#02,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00
 db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#06,#0b,#12,#17,#12,#1e,#1a,#26,#24,#0a,#0d,#1d,#30,#33,#33,#31,#1e,#0d,#07,#1f,#27,#20,#15,#0d,#17,#19,#11,#09,#06,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00
 db #00,#00,#00,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#05,#0d,#12,#16,#1e,#19,#19,#21,#29,#25,#0f,#0c,#29,#2e,#2f,#2a,#0c,#07,#23,#28,#26,#1c,#1d,#1d,#0e,#16,#12,#0b,#04,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#0c,#14,#0b,#00,#00
 db #00,#00,#0d,#27,#21,#10,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#0b,#11,#17,#16,#1e,#27,#22,#1f,#27,#23,#06,#10,#1d,#1c,#12,#06,#1d,#27,#26,#1e,#23,#1f,#22,#12,#13,#11,#08,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#08,#26,#25,#16,#03,#00
 db #00,#00,#20,#22,#13,#13,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#0e,#13,#1d,#0f,#1c,#29,#2b,#21,#23,#1c,#05,#06,#06,#05,#10,#26,#1f,#22,#2c,#21,#11,#21,#1e,#13,#0d,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#05,#1d,#14,#0e,#02,#00
 db #00,#00,#04,#16,#11,#07,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#04,#12,#1e,#1a,#0a,#13,#22,#2a,#29,#28,#14,#04,#04,#10,#25,#28,#2a,#25,#18,#0c,#10,#22,#20,#13,#03,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#03,#04,#02,#00,#00
 db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#09,#18,#25,#0d,#18,#0e,#11,#18,#1c,#1c,#19,#1a,#16,#1c,#16,#13,#0e,#16,#11,#1b,#24,#1b,#09,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#08,#06,#00,#00
 db #00,#0d,#19,#15,#0d,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#13,#23,#21,#22,#29,#20,#17,#13,#11,#11,#11,#11,#13,#18,#1d,#28,#27,#20,#22,#22,#14,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#12,#29,#28,#1f,#1b,#06
 db #1a,#28,#29,#21,#1a,#17,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#07,#1a,#25,#1a,#15,#20,#27,#28,#21,#1e,#1b,#1f,#25,#29,#24,#1b,#11,#21,#24,#1b,#0b,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#03,#05,#02,#05,#23,#26,#23,#1a,#18,#14
 db #1e,#22,#1f,#16,#16,#14,#04,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#10,#1d,#24,#1c,#0a,#0c,#0f,#09,#0c,#0d,#0a,#0a,#0f,#09,#11,#1f,#25,#1f,#15,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#22,#20,#17,#04,#1e,#1f,#18,#10,#12,#11
 db #18,#1b,#1a,#12,#0f,#10,#02,#07,#1e,#15,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#10,#1a,#22,#25,#21,#20,#22,#24,#24,#22,#21,#1f,#22,#25,#23,#1e,#18,#08,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#18,#15,#0c,#00,#14,#1a,#1a,#13,#0e,#07
 db #02,#11,#19,#17,#0c,#03,#00,#1b,#1d,#13,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#12,#14,#1c,#1d,#1e,#1c,#18,#17,#19,#1e,#1e,#1e,#1b,#18,#13,#03,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#03,#04,#03,#01,#00
 db #00,#00,#00,#00,#00,#00,#00,#06,#0f,#09,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#07,#0c,#0d,#0c,#06,#04,#04,#05,#09,#0c,#0c,#0c,#08,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00
 db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00
 db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00
 db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00
 db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00
 db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00
 db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00
 db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00
	;}}}
blobdatapointers:
	dw blobdata0,blobdata1,blobdata2,blobdata3
	dw blobdata4,blobdata5,blobdata6,blobdata7
	dw blobdata8,blobdata9,blobdata10,blobdata11
	dw blobdata12,blobdata13,blobdata14,blobdata15
	dw blobdata16,blobdata17,blobdata18,blobdata19
	dw blobdata20,blobdata21,blobdata22,blobdata23
	dw blobdata24,blobdata25,blobdata26,blobdata27
	dw blobdata28,blobdata29,blobdata30,blobdata31
	dw blobdata32,blobdata33,blobdata34,blobdata35
	dw blobdata36,blobdata37,blobdata38,blobdata39
	dw blobdata40,blobdata41,blobdata42,blobdata43
	dw blobdata44,blobdata45,blobdata46,blobdata47
	dw blobdata48,blobdata49,blobdata50,blobdata51
	dw blobdata52,blobdata53,blobdata54,blobdata55
	dw blobdata56,blobdata57,blobdata58,blobdata59
	dw blobdata60,blobdata61,blobdata62,blobdata63

buffer ds 64*64	; used for floyd steinbergh 
chardef ds 8
einde	equ $

;	vim:foldmethod=marker:ft=z8a:ts=16
