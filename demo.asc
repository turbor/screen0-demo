WRVDP	MACRO	@WAARDE,@POORT
	; {{{
	LD	A,@WAARDE
	OUT	(#99),A
	LD	A,128+@POORT
	OUT	(#99),A
	ENDM
	; }}}

chkvdp2	macro
	; {{{
	LOCAL chkvdp2@sym
chkvdp2@sym
	in	a,(#99)
	rrca
	jp	c,chkvdp2@sym
	endm
	; }}}

DEBUG equ 0

debugdeviceascii macro @TEXTVAL
	; {{{
	if DEBUG
	LOCAL _debugdevicetmp
	LOCAL _debugdevicetmp2
	jr _debugdevicetmp2
_debugdevicetmp 
	db @TEXTVAL
_debugdevicetmp2
	ld a,0x23
	out (0x2e),a
	ld hl,_debugdevicetmp
	ld c,0x2f
	ld b,_debugdevicetmp2-_debugdevicetmp
	otir
	ld a,0x23
	out (0x2e),a
	endif
	endm
	; }}}

divhlby16	macro
	LOCAL _divhlby16
	; {{{
	; divide hl by 16 and place the lowerbyte value in l
	; the high part will be ignored
	; corrected if hl is negative so that a fraction like
	; -0.25 will become 0 and not -1 in twocomplement
	add hl,hl
	add hl,hl
	add hl,hl
	add hl,hl
	ld l,h
	ld a,128
	and l
	jr z,_divhlby16
	inc l
_divhlby16
	endm
	; }}}
START	EQU	#a000

BUFROWS	EQU 8
BUFCOLS EQU 8

; header is created by pasmo  and the --msx switch, the org command should be the first one seen by pasmo
;	db	254
;	dw	START,einde,START
	org	START

	;ld b,128
	ld b,0
fillgradients:	push bc
	;ld a,128
	xor a
	sub b
	call fillbuffer
	call dither
	call buffertochar
	call chartovram
	ei
	halt
	pop bc
	djnz fillgradients
	ret

fillbuffer:	ld hl,buffer
	ld d,h
	ld e,l
	inc de
	ld bc,0+(BUFROWS+1)*(2+BUFCOLS)-1
	ld (hl),a
	ldir
	ret

dither:	; perform floyd steinbergh over the buffer, the buffer has an extra column at the left and right and an extra row to allow the error distribution code to be simpler
	ld ix,buffer+1
	ld b,BUFROWS
dither1:
	push bc
	ld b,BUFCOLS
dither2:
	push bc
	call dithercalc
	inc ix
	pop bc
	djnz dither2
	inc ix
	inc ix
	pop bc
	djnz dither1
	ret

dithercalc	; code that checks if value exceeds thresshold, adjusts the value and disperse the error over the other pixels in the buffer
	ld a,(ix+0)
	ld l,a	; store value in bc
	ld h,0
	cp 128
	jr nc,dithercalc1 ; value >= 128
	xor a
	jr dithercalc2
dithercalc1
	ld a,255
dithercalc2
	; now a is the new value
	ld (ix+0),a
	; now calculate the difference between new and old value and distribute the error
	ld c,a
	xor a ; resets the C-flag at the same time
	ld b,a
	sbc hl,bc ; hl=old-new
	; now distribute 1/16 of  the error to bottom right neighbour
	push hl
	divhlby16
	ld a,(ix+1+BUFCOLS+2)
	add a,l
	ld (ix+1+BUFCOLS+2),a
	pop hl
	; now distribute 3/16 of  the error to bottom left neighbour
	push hl
	ld b,h
	ld c,l
	add hl,hl
	add hl,bc
	divhlby16
	ld a,(ix+BUFCOLS+2-1)
	add a,l
	ld (ix+BUFCOLS+2-1),a
	pop hl
	; now distribute 5/16 of  the error to bottom neighbour
	push hl
	ld b,h
	ld c,l
	add hl,hl
	add hl,hl
	add hl,bc
	divhlby16
	ld a,(ix+BUFCOLS+2)
	add a,l
	ld (ix+BUFCOLS+2),a
	pop hl
	; now distribute 7/16 of  the error to right neighbour
	;push hl
	ld b,h
	ld c,l
	add hl,hl
	ld d,h
	ld e,l
	add hl,hl
	add hl,de
	add hl,bc
	divhlby16
	ld a,(ix+1)
	add a,l
	ld (ix+1),a
	;pop hl
	; Done with the error distribution
	ret

buffertochar:
	ld de,chardef
	ld hl,buffer+1
	ld b,8
buffertochar2:
	push bc
	ld bc,8*256
	xor a
buffertochar4:
	ld a,(hl)
	inc hl
	add a,a ; bit 7 to carry
	rl c ; carry into bit 0
	djnz buffertochar4
	ld a,c
	inc hl
	inc hl
	ld (de),a
	inc de
	pop bc
	djnz buffertochar2
	ret

chartovram:	; copy chardef to vram addr 4096+32*8 (=#1100)
	di
	;no commands so no chkvdp2
	wrvdp 0,45
	wrvdp 0,14
	xor a
	out (#99),a
	ld a,64+#11
	out (#99),a
	ld bc,#98+8*256
	ld hl,chardef
	otir
	ei
	ret

	ds ((($/256)+1)*256)-$

buffer ds 64*64
chardef ds 8
einde	equ $

;	vim:foldmethod=marker:ft=z8a:ts=16
