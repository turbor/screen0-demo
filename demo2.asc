


INCOMPLETE CODE 
after deciding that a 160*96 grid would become a 24KB buffer to work in
I decided to go back to a 80x24 grid in demo3.asc with dithering...









WRVDP	MACRO	@WAARDE,@POORT
	; {{{
	LD	A,@WAARDE
	OUT	(#99),A
	LD	A,128+@POORT
	OUT	(#99),A
	ENDM
	; }}}

chkvdp2	macro
	; {{{
	LOCAL chkvdp2@sym
chkvdp2@sym
	in	a,(#99)
	rrca
	jp	c,chkvdp2@sym
	endm
	; }}}

DEBUG equ 0

debugdeviceascii macro @TEXTVAL
	; {{{
	if DEBUG
	LOCAL _debugdevicetmp
	LOCAL _debugdevicetmp2
	jr _debugdevicetmp2
_debugdevicetmp 
	db @TEXTVAL
_debugdevicetmp2
	ld a,0x23
	out (0x2e),a
	ld hl,_debugdevicetmp
	ld c,0x2f
	ld b,_debugdevicetmp2-_debugdevicetmp
	otir
	ld a,0x23
	out (0x2e),a
	endif
	endm
	; }}}

divhlby16	macro
	LOCAL _divhlby16
	; {{{
	; divide hl by 16 and place the lowerbyte value in l
	; the high part will be ignored
	; corrected if hl is negative so that a fraction like
	; -0.25 will become 0 and not -1 in twocomplement
	add hl,hl
	add hl,hl
	add hl,hl
	add hl,hl
	ld l,h
	ld a,128
	and l
	jr z,_divhlby16
	inc l
_divhlby16
	endm
	; }}}
START	EQU	#a000

; header is created by pasmo  and the --msx switch, the org command should be the first one seen by pasmo
;	db	254
;	dw	START,einde,START
	org	START

	di
	; set up write #4096
	;no commands so no chkvdp2
	wrvdp 0,45
	wrvdp 0,14
	xor a
	out (#99),a
	ld a,64+#10
	out (#99),a
	; now build the chars
	ld b,0
buildchars:	push bc
	;ld a,128
	xor a
	sub b
	call chartovram
	pop bc
	djnz buildchars
	; fill screen with 0 chars
	xor a
	out (#99),a
	ld a,64+#00
	out (#99),a
	xor a
	ld b,a
putchars:	
	out (#98),a
	djnz putchars
	ei
	call clearblobs
	call moveblobs
	call addblobs
	call translatebuf2char
	ret

clearblobs:	; {{{ Code to clear the blobs clip array
	ld hl,blobinfo
	ld b,(hl)
	inc hl
clearblobs1:	push bc
	ld d,(hl)
	inc hl
	ld e,(hl)
	inc hl
	inc hl
	inc hl
	push hl
	call cliptorect
	call clearblobs2
	pop hl
	pop bc
	djnz clearblobs1
	ret

clearblobs2:	; zero out the info within the clipregion
	; determine start adres
	ld a,(clipdx)
	ld l,a
	ld a,(clipdy)
	or 128
	ld h,a
	ld a,(clipdh)
	ld b,a
clearblobs3:
	push hl
	push bc
	ld a,(clipdw)
	ld c,a
	ld e,l
	ld d,h
	inc e
	xor a
	ld b,a
	ld (hl),a
	ldir
	pop bc
	pop hl
	inc h
	djnz clearblobs3
	ret
	; }}}

addblobs:	; {{{ Code to add the blobs to the global buffer
	ld hl,blobinfo
	ld b,(hl)
	inc hl
addblobs1:	push bc
	ld d,(hl)
	inc hl
	ld e,(hl)
	inc hl
	inc hl
	inc hl
	push hl
	call cliptorect
	call addblobs2
	pop hl
	pop bc
	djnz addblobs1
	ret

addblobs2:	; add the info within the clipregion
	; determine start of source addres
	ld hl,blobsource
	ld a,(clipsy)
	or a
	jr z,addblobs21
	ex hl,de
	ld l,a
	ld h,0
	add hl,hl ; *2
	add hl,hl ; *4
	add hl,hl ; *8
	add hl,hl ; *16
	add hl,hl ; *32
	add hl,hl ; *64
	add hl,de
addblobs21:	ld a,(clipsx)
	ld e,a
	ld d,0
	add hl,bc
	ex hl,de
	; determine start adres in destination buffer
	ld a,(clipdx)
	ld l,a
	ld a,(clipdy)
	or 128
	ld h,a
	ld a,(clipdh)
	ld b,a
addblobs3:
	push hl
	push de
	push bc
	ld a,(clipdw)
	ld b,a
addblobs4:	ld a,(de)
	add a,(hl)	; add to existing value and clip to 255
	jr nc,addblobs5
	ld a,255
addblobs5:
	ld (hl),a
	inc de
	inc hl
	djnz addblobs4
	pop bc
	pop de
	ld hl,64
	add hl,de
	ex de,hl
	pop hl
	inc h ; clipdy++
	djnz addblobs3
	ret
	; }}}

moveblobs:	; {{{ Code to clear the blobs clip array
	ld hl,blobinfo
	ld b,(hl)
	inc hl
moveblobs2:	push bc
	ld d,(hl)
	inc hl
	ld e,(hl)
	inc hl
	ld b,(hl)
	inc hl
	ld c,(hl)
	push hl	; we do this hl trickery in case we want to use hl in moveblocks3
	dec hl
	dec hl
	dec hl
	call moveblobs3
	pop hl
	inc hl
	pop bc
	djnz moveblobs2
	ret

moveblobs3:
	ld a,d
	add a,b
	ld d,a
	cp 160
	jr c,moveblobs4:
	; went from 0 to a neg number
	; or to the right over the border
	ld a,b
	neg 
	ld b,a
	ld a,d
	add a,b
	add a,b
	ld d,a
moveblobs4:	
	; now the y
	ld a,e
	add a,c
	ld e,a
	cp 24*4
	jr c,moveblobs5
	; went from 0 to neg or over the max y
	ld a,c
	neg
	ld c,a
	ld a,e
	add a,c
	add a,c
	ld e,a
moveblobs5	;save the values again
	ld (hl),d
	inc hl
	ld (hl),e
	inc hl
	ld (hl),b
	inc hl
	ld (hl),c
	ret
	; }}}

chartovram:	; {{{ create a char with the bits building up 3x2 pixel blocks
	; so that we have a char pattern of
	; 777666xx
	; 777666xx
	; 555444xx
	; 555444xx
	; 333222xx
	; 333222xx
	; 111000xx
	; 111000xx
	; each bit in A turns on the respective pixels
	ld c,a
	call chartovramdef ; bit 7 & 6
	out (#98),a
	out (#98),a
	rl c
	rl c
	ld a,c
	call chartovramdef ; bit 5 & 4
	out (#98),a
	out (#98),a
	rl c
	rl c
	ld a,c
	call chartovramdef ; bit 3 & 2
	out (#98),a
	out (#98),a
	rl c
	rl c
	ld a,c
	call chartovramdef ; bit 1 & 0
	out (#98),a
	out (#98),a
	ret
chartovramdef:	; {{{ use bit 7&6 to determine which pattern to push into the charpattern
	; IN: A
	; OUT: A
	; CHANGES: AF
	rlca
	jr nc,chartovramdef4
	; high pixel set
	rlca
	jr nc,chartovramdef2
	ld a,#fa
	ret
chartovramdef2:	ld a,#e0
	ret
	; high pixel not set
chartovramdef4: rlca
	jr c,chartovramdef6
	xor a
	ret
chartovramdef6:	ld a,#1c
	ret
	;}}}
	; }}}
	
cliptorect:	; {{{ from center of circle (d=64) determine box to fill
	; we clip against a box of (0,0)-(160,96)
	; IN: D=x center, E=y center
	; OUT: clipdx,clipdy,clipsx,clipsy,clipdw,clipdh
	; CHANGES: AF,DE,HL,BC
	ld a,d
	sub 32
	jr nc,cliptorect1
	; We are in the left border so we need to clip
	ld c,a
	neg
	ld (clipsx),a
	ld a,64
	add c
	ld (clipdw),a
	xor a
	ld (clipdx),a
	jr cliptorect3
cliptorect1:	; We are not touching the left border
	ld (clipdx),a
	; maybe we are touching the right border ?
	add a,64 ; no need to check for >255 since x always <= 160
	sub 160
	jr c,cliptorect2
	; we are in the right border 
	add a,64
	ld (clipdw),a
	neg
	add a,160
	ld (clipdx),a
	xor a
	ld (clipsx),a
	jr cliptorect3
cliptorect2:	; we are not in the right border
	ld a,64
	ld (clipdw),a
	xor a
	ld (clipsx),a
cliptorect3:	; now check the y coordinates

	; same logic as checking the x-axis
	ld a,e
	sub 32
	jr nc,cliptorect4
	; We are in the upper border so we need to clip
	ld c,a
	neg
	ld (clipsy),a
	ld a,64
	add c
	ld (clipdh),a
	xor a
	ld (clipdy),a
	ret
cliptorect4:	; We are not touching the upper border
	ld (clipdy),a
	; maybe we are touching the lower border ?
	add a,64 ; no need to check for >255 since x always <= 96
	sub 96
	jr c,cliptorect5
	; we are in the bottom border 
	add a,64
	ld (clipdh),a
	neg
	add a,160
	ld (clipdy),a
	xor a
	ld (clipsy),a
	ret
cliptorect5:	; we are not in the bottom border
	ld a,64
	ld (clipdh),a
	xor a
	ld (clipsy),a
	ret


	; }}}
	
clipdx 	db 0	; the destination x of the box
clipdy	db 0 	; the destination y of the box
clipdw	db 0	; the width of the box
clipdh	db 0	; the width of the destination of the box
clipsx	db 0	; the source x in the origin box around the center
clipsy 	db 0	; the source y in the origin box around the center

blobinfo	db 6 ; nr of blobs
	db 12,45,1,1 ; x,y,speedx,speedy
	db 123,4,-1,1 ; x,y,speedx,speedy
	db 154,94,1,-1 ; x,y,speedx,speedy
	db 60,15,-1,-1 ; x,y,speedx,speedy
	db 12,55,1,-1 ; x,y,speedx,speedy
	db 80,45,1,-1 ; x,y,speedx,speedy

	ds ((($/256)+1)*256)-$

chardef ds 8
einde	equ $

;	vim:foldmethod=marker:ft=z8a:ts=16
